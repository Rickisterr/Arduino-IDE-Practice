/*
Flight Software Code for CSLV

Software's main objective : 
1) Sensor sampling
2) Data Processing and Packet creation
3) Telemetry
4) Launch detection
5) Apogee detection and Drogue Parachute Deployment
6) Main Parachute Deployment
7) Landing Detection
*/

// Changed the main parachute altitude
// Directly using altitude from the array, rather than calculating using pressure
// 

#include <EEPROM.h>

/*
State 0 : Pre launch
State 1 : Ascent --> Kalman Filter
State 2 : Apogee and Parachute Deployment
State 3 : Descent
State 4: Landed
*/


/*
  Sensor Data collection
  Writing in flash
  Telemetry
*/

// Setting up the size of EEPROM

#define EEPROM_SIZE 60

// Declaring required variables



// float altData[] = {100838 , 100827 , 100808 , 100855 , 100825 , 100822 , 100846 , 100856 , 100851 , 100832 , 98533 , 97356 , 96063 , 95045 , 94225 , 93605 , 93137 , 92797 , 92599 , 92720 , 92920 , 93082 , 93232 , 93436 , 93563 , 93738 , 93936 , 94087 , 94283 , 94419 , 94605 , 94761 , 94939 , 95120 , 95312 , 95444 , 95564 , 95712 , 95829 , 95977 , 96093 , 96216 , 96353 , 96479 , 96586 , 96736 , 96828 , 96899 , 96961 , 97064 , 97112 , 97192 , 97311 , 97396 , 97441 , 97549 , 97641 , 97727 , 97783 , 97841 , 97955 , 98043 , 98099 , 98195 , 98288 , 98379 , 98462 , 98497 , 98624 , 98699 , 98769 , 98862 , 98931 , 99041 , 99082 , 99173 , 99281 , 99361 , 99419 , 99536 , 99600 , 99668 , 99774 , 99829 , 99906 , 100028 , 100077 , 100183 , 100257 , 100324 , 100403 , 100501 , 100603 , 100666 , 100777 , 100856 , 100829 , 100860 , 100848 , 100835 , 100867 , 100853 , 100830 , 100838 , 100830 , 100866 , 100841 , 100820 , 100856 , 100832 , 100868 , 100868 , 100868 , 100868 , 100868 , 100868 , 100868};
// int timeData[] = {0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 98 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 118};
// // Assuming pitch and roll values will be in degrees
// float pitch[] = {};
// float yaw[] = {};

float timeData[] = {0.00, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.13969, 0.1486, 0.15689, 0.16468, 0.17204, 0.18309, 0.19966, 0.22451, 0.2618, 0.3118, 0.3618, 0.4118, 0.4618, 0.5118, 0.5618, 0.6118, 0.6618, 0.7118, 0.7618, 0.8118, 0.8618, 0.9118, 0.9618, 1.0118, 1.0618, 1.1118, 1.1618, 1.2118, 1.2618, 1.3118, 1.3618, 1.4118, 1.4618, 1.5118, 1.5618, 1.6118, 1.6618, 1.7118, 1.7618, 1.8118, 1.8618, 1.9118, 1.9618, 2.0118, 2.0618, 2.1109, 2.1609, 2.2109, 2.2609, 2.3028, 2.3524, 2.4024, 2.4524, 2.5024, 2.5524, 2.6024, 2.6518, 2.7018, 2.7518, 2.8018, 2.8518, 2.9018, 2.9518, 3.0018, 3.0518, 3.1018, 3.1518, 3.2018, 3.2518, 3.3018, 3.3518, 3.4018, 3.4518, 3.5018, 3.5518, 3.6018, 3.6518, 3.7018, 3.7518, 3.8018, 3.8518, 3.9018, 3.9518, 4.0018, 4.0518, 4.1018, 4.1518, 4.2018, 4.2518, 4.3018, 4.3518, 4.4018, 4.4518, 4.5018, 4.5518, 4.6018, 4.6518, 4.7018, 4.7518, 4.8018, 4.8518, 4.9018, 4.9518, 5.0018, 5.0518, 5.1018, 5.1518, 5.2018, 5.2518, 5.3018, 5.3518, 5.4018, 5.4518, 5.5018, 5.5518, 5.6018, 5.6518, 5.7018, 5.7518, 5.8018, 5.8518, 5.9018, 5.9518, 6.0018, 6.0518, 6.1018, 6.1518, 6.2018, 6.2518, 6.3018, 6.3518, 6.4018, 6.4518, 6.5018, 6.5518, 6.6018, 6.6518, 6.7018, 6.7518, 6.8018, 6.8518, 6.9018, 6.9518, 7.0018, 7.0518, 7.1018, 7.1518, 7.2018, 7.2518, 7.3018, 7.3518, 7.4018, 7.4518, 7.5018, 7.5518, 7.6018, 7.6518, 7.7018, 7.7518, 7.8018, 7.8518, 7.9018, 7.9518, 8.0018, 8.0518, 8.1018, 8.1518, 8.2018, 8.2518, 8.3018, 8.3518, 8.4018, 8.4518, 8.5018, 8.5518, 8.6018, 8.6518, 8.7018, 8.7518, 8.8018, 8.8518, 8.9018, 8.9518, 9.0018, 9.0518, 9.1018, 9.1518, 9.2018, 9.2518, 9.3018, 9.3518, 9.4018, 9.4518, 9.5018, 9.5518, 9.6018, 9.6518, 9.7018, 9.7518, 9.8018, 9.8518, 9.9018, 9.9518, 10.002, 10.052, 10.102, 10.152, 10.202, 10.252, 10.302, 10.352, 10.402, 10.452, 10.502, 10.552, 10.602, 10.652, 10.702, 10.752, 10.802, 10.852, 10.902, 10.952, 11.002, 11.052, 11.102, 11.152, 11.202, 11.252, 11.302, 11.352, 11.402, 11.452, 11.502, 11.552, 11.602, 11.652, 11.702, 11.752, 11.802, 11.852, 11.902, 11.952, 12.002, 12.052, 12.102, 12.152, 12.202, 12.252, 12.302, 12.352, 12.402, 12.452, 12.502, 12.552, 12.602, 12.652, 12.702, 12.752, 12.802, 12.852, 12.902, 12.952, 13.002, 13.052, 13.102, 13.152, 13.202, 13.252, 13.302, 13.352, 13.402, 13.452, 13.502, 13.552, 13.602, 13.652, 13.702, 13.752, 13.802, 13.852, 13.902, 13.952, 14.002, 14.052, 14.102, 14.152, 14.202, 14.252, 14.302, 14.352, 14.402, 14.452, 14.502, 14.552, 14.602, 14.652, 14.702, 14.752, 14.802, 14.852, 14.902, 14.952, 15.002, 15.052, 15.102, 15.152, 15.202, 15.252, 15.302, 15.352, 15.402, 15.452, 15.502, 15.552, 15.602, 15.652, 15.702, 15.752, 15.802, 15.852, 15.902, 15.952, 16.002, 16.052, 16.102, 16.152, 16.202, 16.252, 16.302, 16.352, 16.402, 16.452, 16.502, 16.552, 16.602, 16.652, 16.702, 16.752, 16.802, 16.852, 16.902, 16.952, 17.002, 17.052, 17.102, 17.152, 17.202, 17.252, 17.302, 17.352, 17.402, 17.452, 17.502, 17.552, 17.602, 17.652, 17.702, 17.752, 17.802, 17.852, 17.902, 17.952, 18.002, 18.052, 18.102, 18.152, 18.202, 18.252, 18.302, 18.352, 18.402, 18.452, 18.502, 18.552, 18.602, 18.652, 18.702, 18.752, 18.802, 18.852, 18.902, 18.952, 19.002, 19.052, 19.102, 19.152, 19.202, 19.252, 19.302, 19.352, 19.402, 19.452, 19.502, 19.552, 19.602, 19.652, 19.702, 19.752, 19.802, 19.852, 19.902, 19.952, 20.002, 20.052, 20.102, 20.152, 20.202, 20.252, 20.302, 20.352, 20.402, 20.452, 20.502, 20.552, 20.602, 20.652, 20.702, 20.752, 20.802, 20.852, 20.902, 20.952, 21.002, 21.052, 21.102, 21.152, 21.202, 21.252, 21.302, 21.352, 21.402, 21.452, 21.502, 21.552, 21.602, 21.652, 21.702, 21.752, 21.802, 21.852, 21.902, 21.952, 22.002, 22.052, 22.102, 22.152, 22.202, 22.252, 22.302, 22.352, 22.402, 22.452, 22.502, 22.552, 22.602, 22.652, 22.702, 22.752, 22.802, 22.852, 22.902, 22.952, 23.002, 23.052, 23.102, 23.152, 23.202, 23.252, 23.302, 23.352, 23.402, 23.452, 23.502, 23.552, 23.602, 23.652, 23.702, 23.752, 23.802, 23.852, 23.902, 23.952, 24.002, 24.052, 24.102, 24.152, 24.202, 24.252, 24.302, 24.352, 24.402, 24.452, 24.502, 24.552, 24.602, 24.652, 24.702, 24.752, 24.802, 24.852, 24.902, 24.952, 25.002, 25.052, 25.102, 25.152, 25.202, 25.252, 25.302, 25.352, 25.402, 25.452, 25.502, 25.552, 25.602, 25.652, 25.702, 25.752, 25.802, 25.852, 25.902, 25.952, 26.002, 26.052, 26.155, 26.212, 26.274, 26.342, 26.416, 26.498, 26.59, 26.696, 26.819, 26.955, 27.111, 27.282, 27.497, 27.727, 27.992, 28.362, 28.862, 29.362, 29.862, 30.362, 30.862, 31.362, 31.862, 32.362, 32.862, 33.362, 33.862, 34.362, 34.862, 35.362, 35.862, 36.362, 36.862, 37.362, 37.862, 38.362, 38.862, 39.362, 39.862, 40.362, 40.862, 41.362, 41.862, 42.362, 42.862, 43.362, 43.862, 44.362, 44.862, 45.362, 45.862, 46.362, 46.862, 47.362, 47.862, 48.362, 48.862, 49.362, 49.862, 50.362, 50.862, 51.362, 51.862, 52.362, 52.862, 53.362, 53.862, 54.362, 54.862, 55.362, 55.862, 56.362, 56.862, 57.362, 57.862, 58.362, 58.862, 59.362, 59.862, 60.362, 60.862, 61.362, 61.862, 62.362, 62.862, 63.362, 63.862, 64.362, 64.862, 65.362, 65.862, 66.362, 66.862, 67.362, 67.862, 68.362, 68.862, 69.362, 69.862, 70.362, 70.862, 71.362, 71.862, 72.362, 72.862, 73.362, 73.862, 74.362, 74.862, 75.362, 75.862, 76.362, 76.862, 77.362, 77.862, 78.362, 78.862, 79.362, 79.862, 80.362, 80.862, 81.362, 81.862, 82.362, 82.862, 83.362, 83.862, 84.362, 84.862, 85.362, 85.862, 86.362, 86.862, 87.362, 87.862, 88.362, 88.862, 89.362, 89.862, 90.362, 90.862, 91.362, 91.862, 92.362, 92.862, 93.362, 93.862, 94.362, 94.862, 95.362, 95.862, 96.362, 96.862, 97.362, 97.862, 98.362, 98.862, 99.362, 99.862, 100.36, 100.86, 101.36, 101.86, 102.36, 102.86, 103.36, 103.86, 104.36, 104.86, 105.36, 105.86, 106.36, 106.86, 107.36, 107.86, 108.36, 108.86, 109.36, 109.86, 110.36, 110.86, 111.36, 111.86, 112.36, 112.86, 113.36, 113.86, 114.36, 114.86, 115.36, 115.86, 116.36, 116.86, 117.36, 117.86, 118.36, 118.86, 119.36, 119.86, 120.36, 120.86, 121.36, 121.86, 122.36, 122.86, 123.36, 123.86, 124.36, 124.86, 125.36, 125.86, 126.36, 126.86, 127.36, 127.86, 128.36, 128.86, 129.36, 129.86, 130.36, 130.86, 131.36, 131.86, 132.36, 132.86, 133.36, 133.86, 134.36, 134.86, 135.36, 135.86, 136.36, 136.86, 137.36, 137.86, 138.36, 138.86, 139.36, 139.86, 140.36, 140.86, 141.36, 141.86, 142.36, 142.86, 143.36, 143.86, 144.36, 144.86, 145.36, 145.86, 146.36, 146.86, 147.36, 147.86, 148.36, 148.86, 149.36, 149.86, 150.36, 150.86, 151.36, 151.86, 152.36, 152.86, 153.36, 153.86, 154.36, 154.86, 155.36, 155.86, 156.36, 156.86, 157.36, 157.86, 158.36, 158.86, 159.36, 159.86, 160.36, 160.86, 161.36, 161.86, 162.36, 162.86, 163.36, 163.86, 164.36, 164.86, 165.36, 165.86, 166.36, 166.86, 167.36, 167.86, 168.36, 168.86, 169.36, 169.86, 170.36, 170.86, 171.36, 171.86, 172.36, 172.86, 173.36, 173.86, 174.36, 174.86, 175.36, 175.86, 176.36, 176.86, 177.36, 177.86, 178.36, 178.86, 179.36, 179.86, 180.36, 180.86, 181.36, 181.86, 182.36, 182.86, 183.36, 183.86, 184.36, 184.86, 185.36, 185.86, 186.36, 186.86, 187.36, 187.86, 188.36, 188.86, 189.36, 189.86, 190.36, 190.86, 191.36, 191.86, 192.36, 192.86, 193.36, 193.86, 194.36, 194.86, 195.36, 195.86, 196.36, 196.86, 197.36, 197.86, 198.36, 198.86, 199.36, 199.86, 200.36, 200.86, 201.36, 201.86, 202.36, 202.86, 203.36, 203.86, 204.36, 204.86, 205.36, 205.86, 206.36, 206.86, 207.36, 207.86, 208.36, 208.86, 209.36, 209.86, 210.36, 210.86, 211.36, 211.86, 212.36, 212.86, 213.36, 213.86, 214.36, 214.86, 215.36, 215.86, 216.36, 216.86, 217.36, 217.86, 218.36, 218.86, 219.36, 219.86, 220.36, 220.86, 221.36, 221.86, 222.36, 222.86, 223.36, 223.86, 224.36, 224.86, 225.36, 225.86, 226.36, 226.86, 227.36, 227.86, 228.36, 228.86, 229.36, 229.86, 230.36, 230.86, 231.36, 231.86, 232.36, 232.86, 233.36, 233.86, 234.36, 234.86, 235.36, 235.86, 236.36, 236.86, 237.36, 237.86, 238.36, 238.86, 239.36, 239.86, 240.36, 240.86, 241.36, 241.86, 242.36, 242.86, 243.36, 243.86, 244.36, 244.86, 245.36, 245.86, 246.36, 246.86, 247.36, 247.86, 248.36, 248.86, 249.36, 249.86, 250.36, 250.86, 251.36, 251.86, 252.36, 252.86, 253.36, 253.86, 254.36, 254.86, 255.36, 255.86, 256.36, 256.86, 257.36, 257.86, 258.36, 258.86, 259.36, 259.86, 260.36, 260.86, 261.36, 261.86, 262.36, 262.86, 263.36, 263.86, 264.36, 264.86, 265.36, 265.86, 266.36, 266.86, 267.36, 267.86, 268.36, 268.86, 269.36, 269.86, 270.36, 270.86, 271.36, 271.86, 272.36, 272.86, 273.36, 273.86, 274.36, 274.86, 275.36, 275.86, 276.36, 276.86, 277.36, 277.86, 278.36, 278.86, 279.36, 279.86, 280.36, 280.86, 281.36, 281.86, 282.36, 282.86, 283.36, 283.86, 284.36, 284.86, 285.36, 285.86, 286.36, 286.86, 287.36, 287.86, 288.36, 288.86, 289.36, 289.86, 290.36, 290.86, 291.36, 291.86, 292.36, 292.86, 293.36, 293.86, 294.36, 294.86, 295.36, 295.86, 296.36, 296.86, 297.36, 297.86, 298.36, 298.86, 299.36, 299.86, 300.36, 300.86, 301.36, 301.86, 302.36, 302.86, 303.36, 303.86, 304.36, 304.86, 305.36, 305.86, 306.36, 306.86, 307.36, 307.86, 308.36, 308.86, 309.36, 309.86, 310.36, 310.86, 311.36, 311.86, 312.36, 312.86, 313.36, 313.86, 314.36, 314.86, 315.36, 315.86, 316.36, 316.86, 317.36, 317.86, 318.36, 318.86, 319.36, 319.86, 320.36, 320.86, 321.36, 321.57, 321.98, 322.48, 322.98, 323.48, 323.98, 324.48, 324.98, 325.48, 325.98, 326.48, 326.98, 327.48, 327.98, 328.48, 328.98, 329.48, 329.98, 330.48, 330.98, 331.48, 331.98, 332.48, 332.98, 333.48, 333.98, 334.48, 334.98, 335.48, 335.98, 336.48, 336.98, 337.48, 337.98, 338.48, 338.98, 339.48, 339.98, 340.48, 340.98, 341.48, 341.98, 342.48, 342.98, 343.48, 343.98, 344.48};
float altData[] = {0.0000, 0.0003, 0.0026, 0.0100, 0.0252, 0.0496, 0.0835, 0.1265, 0.1787, 0.2402, 0.3111, 0.3912, 0.4806, 0.5792, 0.6835, 0.7872, 0.8905, 0.9934, 1.0959, 1.2595, 1.5268, 1.9773, 2.7657, 4.0371, 5.5572, 7.3296, 9.3577, 11.6430, 14.1840, 16.9840, 20.0410, 23.3570, 26.9320, 30.7670, 34.8610, 39.2150, 43.8300, 48.7050, 53.8410, 59.2380, 64.8960, 70.8160, 76.9980, 83.4400, 90.1440, 97.1070, 104.3300, 111.8100, 119.5600, 127.5600, 135.8100, 144.3200, 153.0800, 162.0900, 171.3400, 180.8200, 190.5400, 200.4900, 210.6700, 220.8800, 231.4800, 242.3000, 253.3300, 262.7300, 274.0400, 285.6300, 297.4100, 309.3800, 321.5300, 333.8600, 346.2100, 358.8700, 371.7000, 384.6800, 397.8200, 411.1000, 424.5300, 438.0900, 451.7800, 465.6000, 479.5400, 493.5900, 507.7500, 521.9900, 536.2900, 550.6300, 564.9900, 579.3500, 593.7000, 608.0400, 622.3500, 636.6400, 650.8800, 665.0800, 679.2400, 693.3400, 707.3900, 721.3700, 735.2900, 749.1400, 762.9200, 776.6400, 790.3000, 803.8900, 817.4200, 830.8800, 844.2800, 857.6200, 870.9000, 884.1200, 897.2800, 910.3700, 923.4100, 936.3900, 949.3100, 962.1700, 974.9700, 987.7200, 1000.4000, 1013.0000, 1025.6000, 1038.1000, 1050.6000, 1063.0000, 1075.4000, 1087.7000, 1099.9000, 1112.1000, 1124.2000, 1136.3000, 1148.3000, 1160.3000, 1172.2000, 1184.1000, 1195.9000, 1207.7000, 1219.4000, 1231.1000, 1242.7000, 1254.3000, 1265.8000, 1277.3000, 1288.7000, 1300.1000, 1311.4000, 1322.7000, 1333.9000, 1345.1000, 1356.2000, 1367.3000, 1378.3000, 1389.3000, 1400.2000, 1411.1000, 1422.0000, 1432.8000, 1443.5000, 1454.2000, 1464.9000, 1475.5000, 1486.1000, 1496.6000, 1507.1000, 1517.6000, 1528.0000, 1538.3000, 1548.6000, 1558.9000, 1569.1000, 1579.3000, 1589.4000, 1599.5000, 1609.6000, 1619.6000, 1629.6000, 1639.5000, 1649.4000, 1659.2000, 1669.0000, 1678.8000, 1688.5000, 1698.2000, 1707.8000, 1717.4000, 1727.0000, 1736.5000, 1746.0000, 1755.4000, 1764.8000, 1774.2000, 1783.5000, 1792.8000, 1802.0000, 1811.2000, 1820.4000, 1829.5000, 1838.6000, 1847.6000, 1856.6000, 1865.6000, 1874.5000, 1883.4000, 1892.3000, 1901.1000, 1909.9000, 1918.6000, 1927.4000, 1936.0000, 1944.7000, 1953.3000, 1961.8000, 1970.3000, 1978.8000, 1987.3000, 1995.7000, 2004.1000, 2012.4000, 2020.7000, 2029.0000, 2037.2000, 2045.4000, 2053.6000, 2061.7000, 2069.8000, 2077.9000, 2085.9000, 2093.9000, 2101.8000, 2109.8000, 2117.6000, 2125.5000, 2133.3000, 2141.1000, 2148.8000, 2156.6000, 2164.2000, 2171.9000, 2179.5000, 2187.1000, 2194.6000, 2202.1000, 2209.6000, 2217.1000, 2224.5000, 2231.9000, 2239.2000, 2246.5000, 2253.8000, 2261.0000, 2268.3000, 2275.4000, 2282.6000, 2289.7000, 2296.8000, 2303.9000, 2310.9000, 2317.9000, 2324.8000, 2331.7000, 2338.6000, 2345.5000, 2352.3000, 2359.1000, 2365.9000, 2372.6000, 2379.3000, 2386.0000, 2392.6000, 2399.3000, 2405.8000, 2412.4000, 2418.9000, 2425.4000, 2431.8000, 2438.3000, 2444.7000, 2451.0000, 2457.3000, 2463.7000, 2469.9000, 2476.2000, 2482.4000, 2488.6000, 2494.7000, 2500.8000, 2506.9000, 2513.0000, 2519.0000, 2525.0000, 2531.0000, 2536.9000, 2542.8000, 2548.7000, 2554.6000, 2560.4000, 2566.2000, 2571.9000, 2577.7000, 2583.4000, 2589.0000, 2594.7000, 2600.3000, 2605.9000, 2611.5000, 2617.0000, 2622.5000, 2628.0000, 2633.4000, 2638.8000, 2644.2000, 2649.6000, 2654.9000, 2660.2000, 2665.5000, 2670.7000, 2675.9000, 2681.1000, 2686.3000, 2691.4000, 2696.5000, 2701.6000, 2706.6000, 2711.6000, 2716.6000, 2721.6000, 2726.5000, 2731.4000, 2736.3000, 2741.1000, 2745.9000, 2750.7000, 2755.5000, 2760.2000, 2764.9000, 2769.6000, 2774.3000, 2778.9000, 2783.5000, 2788.1000, 2792.6000, 2797.1000, 2801.6000, 2806.1000, 2810.5000, 2814.9000, 2819.3000, 2823.7000, 2828.0000, 2832.3000, 2836.6000, 2840.8000, 2845.0000, 2849.2000, 2853.4000, 2857.5000, 2861.6000, 2865.7000, 2869.8000, 2873.8000, 2877.8000, 2881.8000, 2885.7000, 2889.6000, 2893.5000, 2897.4000, 2901.2000, 2905.1000, 2908.9000, 2912.6000, 2916.4000, 2920.1000, 2923.7000, 2927.4000, 2931.0000, 2934.6000, 2938.2000, 2941.8000, 2945.3000, 2948.8000, 2952.3000, 2955.7000, 2959.1000, 2962.5000, 2965.9000, 2969.2000, 2972.6000, 2975.9000, 2979.1000, 2982.4000, 2985.6000, 2988.8000, 2991.9000, 2995.1000, 2998.2000, 3001.3000, 3004.3000, 3007.3000, 3010.4000, 3013.3000, 3016.3000, 3019.2000, 3022.1000, 3025.0000, 3027.9000, 3030.7000, 3033.5000, 3036.3000, 3039.0000, 3041.7000, 3044.4000, 3047.1000, 3049.8000, 3052.4000, 3055.0000, 3057.6000, 3060.1000, 3062.6000, 3065.1000, 3067.6000, 3070.0000, 3072.5000,
                   3074.9000, 3077.2000, 3079.6000, 3081.9000, 3084.2000, 3086.5000, 3088.7000, 3090.9000, 3093.1000, 3095.3000, 3097.4000, 3099.6000, 3101.7000, 3103.7000, 3105.8000, 3107.8000, 3109.8000, 3111.7000, 3113.7000, 3115.6000, 3117.5000, 3119.4000, 3121.2000, 3123.0000, 3124.8000, 3126.6000, 3128.3000, 3130.1000, 3131.8000, 3133.4000, 3135.1000, 3136.7000, 3138.3000, 3139.9000, 3141.4000, 3142.9000, 3144.4000, 3145.9000, 3147.3000, 3148.8000, 3150.2000, 3151.5000, 3152.9000, 3154.2000, 3155.5000, 3156.8000, 3158.0000, 3159.2000, 3160.4000, 3161.6000, 3162.8000, 3163.9000, 3165.0000, 3166.1000, 3167.1000, 3168.2000, 3169.2000, 3170.1000, 3171.1000, 3172.0000, 3172.9000, 3173.8000, 3174.7000, 3175.5000, 3176.3000, 3177.1000, 3177.8000, 3178.6000, 3179.3000, 3180.0000, 3180.6000, 3181.3000, 3181.9000, 3182.5000, 3183.0000, 3183.6000, 3184.1000, 3184.6000, 3185.0000, 3185.5000, 3185.9000, 3186.3000, 3186.6000, 3187.0000, 3187.3000, 3187.6000, 3187.9000, 3188.1000, 3188.3000, 3188.5000, 3188.7000, 3188.9000, 3189.0000, 3189.1000, 3189.2000, 3189.2000, 3189.3000, 3189.3000, 3189.2000, 3189.2000, 3189.1000, 3189.0000, 3188.9000, 3188.8000, 3188.6000, 3188.4000, 3188.2000, 3188.0000, 3187.7000, 3187.5000, 3187.2000, 3186.8000, 3186.5000, 3186.1000, 3185.7000, 3185.3000, 3184.8000, 3184.4000, 3183.4000, 3182.8000, 3182.2000, 3181.5000, 3180.8000, 3180.0000, 3179.0000, 3178.0000, 3176.7000, 3175.4000, 3173.8000, 3172.0000, 3169.7000, 3167.3000, 3164.4000, 3160.5000, 3155.0000, 3149.6000, 3144.1000, 3138.7000, 3133.2000, 3127.8000, 3122.3000, 3116.9000, 3111.4000, 3106.0000, 3100.5000, 3095.1000, 3089.6000, 3084.2000, 3078.7000, 3073.3000, 3067.9000, 3062.4000, 3057.0000, 3051.6000, 3046.1000, 3040.7000, 3035.3000, 3029.9000, 3024.4000, 3019.0000, 3013.6000, 3008.2000, 3002.8000, 2997.3000, 2991.9000, 2986.5000, 2981.1000, 2975.7000, 2970.3000, 2964.9000, 2959.5000, 2954.1000, 2948.7000, 2943.3000, 2937.9000, 2932.5000, 2927.1000, 2921.7000, 2916.3000, 2910.9000, 2905.5000, 2900.1000, 2894.7000, 2889.3000, 2883.9000, 2878.6000, 2873.2000, 2867.8000, 2862.4000, 2857.0000, 2851.7000, 2846.3000, 2840.9000, 2835.5000, 2830.2000, 2824.8000, 2819.4000, 2814.1000, 2808.7000, 2803.3000, 2798.0000, 2792.6000, 2787.3000, 2781.9000, 2776.6000, 2771.2000, 2765.9000, 2760.5000, 2755.2000, 2749.8000, 2744.5000, 2739.1000, 2733.8000, 2728.4000, 2723.1000, 2717.8000, 2712.4000, 2707.1000, 2701.7000, 2696.4000, 2691.1000, 2685.7000, 2680.4000, 2675.1000, 2669.8000, 2664.4000, 2659.1000, 2653.8000, 2648.5000, 2643.2000, 2637.8000, 2632.5000, 2627.2000, 2621.9000, 2616.6000, 2611.3000, 2606.0000, 2600.7000, 2595.3000, 2590.0000, 2584.7000, 2579.4000, 2574.1000, 2568.8000, 2563.5000, 2558.2000, 2553.0000, 2547.7000, 2542.4000, 2537.1000, 2531.8000, 2526.5000, 2521.2000, 2515.9000, 2510.6000, 2505.4000, 2500.1000, 2494.8000, 2489.5000, 2484.2000, 2479.0000, 2473.7000, 2468.4000, 2463.1000, 2457.9000, 2452.6000, 2447.3000, 2442.1000, 2436.8000, 2431.6000, 2426.3000, 2421.0000, 2415.8000, 2410.5000, 2405.3000, 2400.0000, 2394.8000, 2389.5000, 2384.3000, 2379.0000, 2373.8000, 2368.5000, 2363.3000, 2358.0000, 2352.8000, 2347.6000, 2342.3000, 2337.1000, 2331.8000, 2326.6000, 2321.4000, 2316.1000, 2310.9000, 2305.7000, 2300.5000, 2295.2000, 2290.0000, 2284.8000, 2279.6000, 2274.3000, 2269.1000, 2263.9000, 2258.7000, 2253.5000, 2248.3000, 2243.0000, 2237.8000, 2232.6000, 2227.4000, 2222.2000, 2217.0000, 2211.8000, 2206.6000, 2201.4000, 2196.2000, 2191.0000, 2185.8000, 2180.6000, 2175.4000, 2170.2000, 2165.0000, 2159.8000, 2154.7000, 2149.5000, 2144.3000, 2139.1000, 2133.9000, 2128.7000, 2123.5000, 2118.4000, 2113.2000, 2108.0000, 2102.8000, 2097.7000, 2092.5000, 2087.3000, 2082.2000, 2077.0000, 2071.8000, 2066.6000, 2061.5000, 2056.3000, 2051.2000, 2046.0000, 2040.8000, 2035.7000, 2030.5000, 2025.4000, 2020.2000, 2015.1000, 2009.9000, 2004.8000, 1999.6000, 1994.5000, 1989.3000, 1984.2000, 1979.0000, 1973.9000, 1968.7000, 1963.6000, 1958.5000, 1953.3000, 1948.2000, 1943.0000, 1937.9000, 1932.8000, 1927.7000, 1922.5000, 1917.4000, 1912.3000, 1907.1000, 1902.0000, 1896.9000, 1891.8000, 1886.7000, 1881.5000, 1876.4000, 1871.3000, 1866.2000, 1861.1000, 1856.0000, 1850.9000, 1845.7000, 1840.6000, 1835.5000, 1830.4000, 1825.3000, 1820.2000, 1815.1000, 1810.0000, 1804.9000, 1799.8000, 1794.7000, 1789.6000, 1784.5000, 1779.4000, 1774.4000, 1769.3000, 1764.2000, 1759.1000, 1754.0000, 1748.9000, 1743.8000, 1738.8000, 1733.7000, 1728.6000, 1723.5000, 1718.4000, 1713.4000, 1708.3000, 1703.2000, 1698.2000, 1693.1000, 1688.0000, 1682.9000, 1677.9000, 1672.8000, 1667.7000, 1662.7000, 1657.6000, 1652.6000, 1647.5000, 1642.4000, 1637.4000, 1632.3000, 1627.3000, 1622.2000, 1617.2000, 1612.1000, 1607.1000, 1602.0000, 1597.0000, 1591.9000, 1586.9000, 1581.9000, 1576.8000, 1571.8000, 1566.7000, 1561.7000, 1556.7000, 1551.6000, 1546.6000, 1541.6000, 1536.5000, 1531.5000, 1526.5000, 1521.4000, 1516.4000, 1511.4000, 1506.4000, 1501.3000, 1496.3000, 1491.3000, 1486.3000, 1481.3000, 1476.2000, 1471.2000, 1466.2000, 1461.2000, 1456.2000, 1451.2000, 1446.2000, 1441.2000, 1436.2000, 1431.2000, 1426.2000, 1421.1000, 1416.1000, 1411.1000, 1406.1000, 1401.2000, 1396.2000, 1391.2000, 1386.2000, 1381.2000, 1376.2000, 1371.2000, 1366.2000, 1361.2000, 1356.2000, 1351.2000, 1346.3000, 1341.3000, 1336.3000, 1331.3000, 1326.3000, 1321.4000, 1316.4000, 1311.4000, 1306.4000, 1301.5000, 1296.5000, 1291.5000, 1286.6000, 1281.6000, 1276.6000, 1271.7000, 1266.7000, 1261.7000, 1256.8000, 1251.8000, 1246.8000, 1241.9000, 1236.9000, 1232.0000, 1227.0000, 1222.1000, 1217.1000, 1212.2000, 1207.2000, 1202.3000, 1197.3000, 1192.4000, 1187.4000, 1182.5000, 1177.5000, 1172.6000, 1167.7000, 1162.7000, 1157.8000, 1152.8000, 1147.9000, 1143.0000, 1138.0000, 1133.1000, 1128.2000, 1123.2000, 1118.3000, 1113.4000, 1108.5000, 1103.5000, 1098.6000, 1093.7000, 1088.8000, 1083.9000, 1078.9000, 1074.0000, 1069.1000, 1064.2000, 1059.3000, 1054.4000, 1049.4000, 1044.5000, 1039.6000, 1034.7000, 1029.8000, 1024.9000, 1020.0000, 1015.1000, 1010.2000, 1005.3000, 1000.4000, 995.4900, 990.5900, 985.6900, 980.8000, 975.9000, 971.0100, 966.1200, 961.2300, 956.3400, 951.4500, 946.5600, 941.6800, 936.7900, 931.9100, 927.0200, 922.1400, 917.2600, 912.3800, 907.5100, 902.6300, 897.7500, 892.8800, 888.0000, 883.1300, 878.2600, 873.3900, 868.5200, 863.6600, 858.7900, 853.9300, 849.0600, 844.2000, 839.3400, 834.4800, 829.6200, 824.7600, 819.9100, 815.0500, 810.2000, 805.3400, 800.4900, 795.6400, 790.7900, 785.9400, 781.0900, 776.2500, 771.4000, 766.5600, 761.7200, 756.8800, 752.0400, 747.2000, 742.3600, 737.5200, 732.6900, 727.8500, 723.0200, 718.1800, 713.3500, 708.5200, 703.6900, 698.8700, 694.0400, 689.2100, 684.3900, 679.5600, 674.7400, 669.9200, 665.1000, 660.2800, 655.4600, 650.6500, 645.8300, 641.0200, 636.2000, 631.3900, 626.5800, 621.7700, 616.9600, 612.1500, 607.3500, 602.5400, 597.7300, 592.9300, 588.1300, 583.3300, 578.5300, 573.7300, 568.9300, 564.1300, 559.3300, 554.5400, 549.7500, 544.9500, 540.1600, 535.3700, 530.5800, 525.7900, 521.0100, 516.2200, 511.4400, 506.6500, 501.8700, 497.0900, 492.3100, 487.5300, 482.7500, 477.9700, 473.2000, 468.4200, 463.6500, 458.8700, 454.1000, 449.3300, 444.5600, 439.7900, 435.0300, 430.2600, 425.4900, 420.7300, 415.9700, 411.2000, 406.4400, 401.6800, 396.9300, 392.1700, 387.4100, 382.6600, 377.9000, 373.1500, 368.4000, 363.6500, 358.9000, 354.1500, 349.4000, 344.6600, 339.9100, 335.1700, 330.4300, 325.6900, 320.9500, 316.2100, 311.4700, 306.7300, 301.9900, 297.2600, 292.5200, 287.7900, 283.0600, 278.3300, 273.6000, 268.8700, 264.1400, 259.4100, 254.6900, 249.9700, 245.2500, 240.5200, 235.8000, 231.0800, 226.3700, 221.6500, 216.9300, 212.2200, 207.5000, 202.7900, 198.0700, 193.3600, 191.4900, 187.8600, 183.6500, 179.4400, 175.2300, 171.0200, 166.8100, 162.6000, 158.4000, 154.1900, 149.9900, 145.7800, 141.5800, 137.3700, 133.1700, 128.9700, 124.7700, 120.5700, 116.3700, 112.1700, 107.9800, 103.7800, 99.5890, 95.3940, 91.2000, 87.0080, 82.8150, 78.6240, 74.4340, 70.2440, 66.0560, 61.8700, 57.6840, 53.4980, 49.3130, 45.1280, 40.9440, 36.7620, 32.5820, 28.4010, 24.2200, 20.0400, 15.8620, 11.6830, 7.5064, 3.3326, -0.8412};
float vertVelocity[] = {0, 0.054059, 0.41215, 1.0744, 1.9563, 2.9324, 3.8426, 4.7535, 5.6852, 6.6204, 7.5505, 8.4756, 9.3969, 10.323, 11.225, 12.06, 12.841, 13.578, 14.279, 15.335, 16.926, 19.327, 22.962, 27.899, 32.908, 37.988, 43.138, 48.264, 53.406, 58.566, 63.734, 68.911, 74.095, 79.286, 84.483, 89.686, 94.894, 100.11, 105.33, 110.55, 115.79, 121.02, 126.24, 131.46, 136.67, 141.88, 147.08, 152.26, 157.43, 162.57, 167.68, 172.72, 177.68, 182.56, 187.36, 192.07, 196.7, 201.25, 205.7, 210, 214.28, 218.48, 222.6, 225.98, 229.9, 233.77, 237.54, 241.22, 244.81, 248.3, 251.65, 254.95, 258.13, 261.22, 264.21, 267.09, 269.88, 272.56, 275.15, 277.62, 279.97, 282.17, 284.11, 285.56, 286.5, 287.04, 287.23, 287.2, 286.95, 286.54, 285.98, 285.28, 284.52, 283.65, 282.63, 281.5, 280.29, 278.99, 277.66, 276.35, 275.04, 273.74, 272.46, 271.19, 269.92, 268.67, 267.42, 266.19, 264.96, 263.75, 262.54, 261.34, 260.15, 258.97, 257.8, 256.64, 255.48, 254.33, 253.19, 252.06, 250.93, 249.82, 248.71, 247.6, 246.51, 245.42, 244.34, 243.27, 242.2, 241.14, 240.08, 239.03, 237.99, 236.96, 235.93, 234.9, 233.89, 232.87, 231.87, 230.87, 229.88, 228.89, 227.9, 226.93, 225.95, 224.99, 224.02, 223.07, 222.12, 221.17, 220.23, 219.29, 218.36, 217.43, 216.51, 215.59, 214.68, 213.77, 212.87, 211.96, 211.07, 210.18, 209.29, 208.41, 207.53, 206.66, 205.78, 204.92, 204.05, 203.19, 202.34, 201.49, 200.64, 199.8, 198.96, 198.12, 197.29, 196.46, 195.63, 194.81, 193.99, 193.18, 192.37, 191.56, 190.75, 189.95, 189.15, 188.35, 187.56, 186.77, 185.98, 185.2, 184.42, 183.64, 182.86, 182.09, 181.32, 180.56, 179.79, 179.03, 178.28, 177.52, 176.77, 176.02, 175.27, 174.52, 173.78, 173.04, 172.31, 171.57, 170.84, 170.11, 169.38, 168.66, 167.94, 167.21, 166.5, 165.78, 165.07, 164.36, 163.65, 162.94, 162.24, 161.54, 160.84, 160.14, 159.44, 158.75, 158.06, 157.37, 156.68, 156, 155.31, 154.63, 153.95, 153.27, 152.6, 151.92, 151.25, 150.58, 149.91, 149.25, 148.58, 147.92, 147.26, 146.6, 145.94, 145.29, 144.63, 143.98, 143.33, 142.68, 142.03, 141.39, 140.74, 140.1, 139.46, 138.82, 138.18, 137.54, 136.91, 136.28, 135.64, 135.01, 134.38, 133.76, 133.13, 132.51, 131.89, 131.26, 130.64, 130.02, 129.41, 128.79, 128.17, 127.56, 126.95, 126.34, 125.73, 125.12, 124.51, 123.91, 123.3, 122.7, 122.1, 121.5, 120.9, 120.3, 119.7, 119.1, 118.51, 117.92, 117.32, 116.73, 116.14, 115.55, 114.97, 114.38, 113.79, 113.21, 112.62, 112.04, 111.46, 110.88, 110.3, 109.72, 109.14, 108.57, 107.99, 107.42, 106.84, 106.27, 105.7, 105.13, 104.56, 103.99, 103.42, 102.86, 102.29, 101.73, 101.16, 100.6, 100.04, 99.474, 98.914, 98.354, 97.796, 97.238, 96.681, 96.125, 95.57, 95.015, 94.461, 93.908, 93.355, 92.803, 92.251, 91.701, 91.151, 90.602, 90.054, 89.508, 88.962, 88.417, 87.873, 87.329, 86.787, 86.245, 85.703, 85.163, 84.622, 84.082, 83.543, 83.003, 82.465, 81.926, 81.389, 80.852, 80.316, 79.781, 79.246, 78.713, 78.18, 77.649, 77.118, 76.587, 76.058, 75.529, 75.001, 74.473, 73.945, 73.418, 72.892, 72.365, 71.84, 71.314, 70.789, 70.264, 69.74, 69.216, 68.693, 68.17, 67.648, 67.127, 66.607, 66.087, 65.568, 65.049, 64.531, 64.014, 63.497, 62.981, 62.464, 61.949, 61.433, 60.918, 60.404, 59.89, 59.376, 58.862, 58.349, 57.836, 57.324, 56.812, 56.3, 55.789, 55.278, 54.767, 54.257, 53.747, 53.238, 52.729, 52.22, 51.712, 51.204, 50.697, 50.191, 49.685, 49.179, 48.674, 48.169, 47.664, 47.16, 46.656, 46.152, 45.648, 45.145, 44.642, 44.14, 43.638, 43.136, 42.634, 42.133, 41.632, 41.131, 40.631, 40.131, 39.631, 39.132, 38.632, 38.133, 37.634, 37.135, 36.636, 36.138, 35.64, 35.142, 34.644, 34.146, 33.649, 33.152, 32.655, 32.158, 31.661, 31.164, 30.668, 30.172, 29.676, 29.18, 28.685, 28.19, 27.695, 27.2, 26.706, 26.212, 25.718, 25.225, 24.731, 24.238, 23.745, 23.253, 22.761, 22.269, 21.777, 21.285, 20.794, 20.303, 19.812, 19.321, 18.831, 18.341, 17.851, 17.361, 16.871, 16.382, 15.892, 15.403, 14.914, 14.425, 13.937, 13.448, 12.96, 12.472, 11.984, 11.497, 11.009, 10.522, 10.034, 9.5471, 9.0602, 8.5735, 8.0871, 7.6008, 7.1147, 6.629, 6.1439, 5.6593, 5.1749, 4.6909, 4.2073, 3.7243, 3.2418, 2.7595, 2.2776, 1.7962, 1.3155, 0.83565, 0.35663, -0.12154, -0.59897, -1.0766, -1.5593, -2.0415, -2.5229, -3.0036, -3.4835, -3.9622, -4.4395, -4.9158, -5.3909, -5.8644, -6.336, -6.8054, -7.273, -7.7383, -8.2011, -8.6616, -9.1194, -9.5741, -9.9679, -9.9244, -9.8964, -9.8835, -9.8871, -9.9082, -9.9532, -10.025, -10.119, -10.223, -10.336, -10.441, -10.567, -10.658, -10.735, -10.824, -10.901, -10.914, -10.911, -10.909, -10.907, -10.903, -10.901, -10.898, -10.895, -10.892, -10.889, -10.886, -10.883, -10.88, -10.877, -10.868, -10.87, -10.868, -10.866, -10.86, -10.859, -10.857, -10.854, -10.851, -10.848, -10.845, -10.842, -10.839, -10.836, -10.831, -10.83, -10.827, -10.823, -10.817, -10.817, -10.815, -10.811, -10.809, -10.805, -10.802, -10.799, -10.796, -10.787, -10.79, -10.785, -10.784, -10.781, -10.778, -10.773, -10.772, -10.769, -10.764, -10.762, -10.76, -10.753, -10.753, -10.75, -10.747, -10.744, -10.739, -10.738, -10.736, -10.733, -10.728, -10.727, -10.723, -10.721, -10.717, -10.715, -10.712, -10.709, -10.706, -10.703, -10.7, -10.696, -10.693, -10.692, -10.689, -10.683, -10.683, -10.68, -10.676, -10.673, -10.67, -10.668, -10.665, -10.663, -10.66, -10.657, -10.654, -10.651, -10.648, -10.645, -10.643, -10.638, -10.637, -10.633, -10.631, -10.628, -10.624, -10.623, -10.62, -10.617, -10.614, -10.609, -10.607, -10.606, -10.603, -10.6, -10.594, -10.594, -10.592, -10.589, -10.586, -10.583, -10.58, -10.578, -10.575, -10.572, -10.569, -10.567, -10.564, -10.562, -10.558, -10.555, -10.553, -10.549, -10.547, -10.541, -10.541, -10.537, -10.536, -10.532, -10.528, -10.527, -10.522, -10.517, -10.517, -10.515, -10.51, -10.508, -10.507, -10.504, -10.5, -10.498, -10.493, -10.492, -10.49, -10.487, -10.484, -10.479, -10.479, -10.476, -10.472, -10.47, -10.467, -10.465, -10.462, -10.459, -10.456, -10.453, -10.451, -10.448, -10.445, -10.443, -10.44, -10.435, -10.434, -10.431, -10.428, -10.426, -10.422, -10.42, -10.417, -10.415, -10.412, -10.408, -10.406, -10.404, -10.394, -10.397, -10.394, -10.391, -10.39, -10.388, -10.385, -10.383, -10.38, -10.377, -10.374, -10.372, -10.368, -10.365, -10.363, -10.361, -10.358, -10.354, -10.35, -10.35, -10.347, -10.343, -10.342, -10.338, -10.337, -10.334, -10.332, -10.33, -10.327, -10.324, -10.322, -10.319, -10.316, -10.312, -10.311, -10.308, -10.306, -10.3, -10.3, -10.298, -10.296, -10.292, -10.29, -10.288, -10.285, -10.282, -10.277, -10.276, -10.273, -10.271, -10.268, -10.266, -10.263, -10.259, -10.258, -10.254, -10.252, -10.249, -10.246, -10.243, -10.241, -10.238, -10.236, -10.233, -10.228, -10.227, -10.226, -10.223, -10.219, -10.218, -10.214, -10.212, -10.209, -10.205, -10.202, -10.202, -10.199, -10.197, -10.194, -10.19, -10.189, -10.186, -10.181, -10.178, -10.175, -10.176, -10.169, -10.17, -10.168, -10.166, -10.161, -10.16, -10.158, -10.155, -10.153, -10.15, -10.148, -10.145, -10.141, -10.14, -10.138, -10.135, -10.132, -10.128, -10.127, -10.124, -10.122, -10.12, -10.115, -10.114, -10.112, -10.108, -10.106, -10.102, -10.102, -10.098, -10.095, -10.095, -10.092, -10.089, -10.085, -10.084, -10.08, -10.079, -10.077, -10.074, -10.072, -10.07, -10.062, -10.064, -10.062, -10.056, -10.056, -10.054, -10.053, -10.05, -10.047, -10.046, -10.041, -10.041, -10.038, -10.033, -10.033, -10.03, -10.028, -10.024, -10.023, -10.02, -10.017, -10.012, -10.012, -10.006, -10.007, -10.005, -10.003, -9.9998, -9.997, -9.9948, -9.9907, -9.989, -9.9856, -9.9848, -9.979, -9.9774, -9.9768, -9.9749, -9.9702, -9.9694, -9.9666, -9.9611, -9.9624, -9.9599, -9.9575, -9.9527, -9.9523, -9.9474, -9.9474, -9.9451, -9.9428, -9.9399, -9.9375, -9.9339, -9.9319, -9.9305, -9.9281, -9.9256, -9.9221, -9.9208, -9.918, -9.916, -9.9136, -9.9106, -9.9085, -9.9014, -9.9038, -9.901, -9.8984, -9.8962, -9.8938, -9.8914, -9.8879, -9.8871, -9.8829, -9.8819, -9.8799, -9.8762, -9.8749, -9.872, -9.866, -9.8681, -9.8652, -9.8632, -9.8587, -9.8586, -9.8555, -9.8526, -9.8508, -9.8485, -9.8429, -9.8446, -9.8419, -9.84, -9.8376, -9.8352, -9.833, -9.8306, -9.8282, -9.8251, -9.8213, -9.8215, -9.8177, -9.8158, -9.8144, -9.8123, -9.8076, -9.8051, -9.8047, -9.8027, -9.8001, -9.7985, -9.7943, -9.7937, -9.791, -9.7843, -9.7853, -9.7814, -9.7816, -9.7772, -9.7757, -9.7744, -9.77, -9.7696, -9.7672, -9.7645,
                   -9.761, -9.7597, -9.7572, -9.7553, -9.7524, -9.7507, -9.7479, -9.7457, -9.7424, -9.7409, -9.7385, -9.7363, -9.7306, -9.7318, -9.7228, -9.7271, -9.7226, -9.7215, -9.7191, -9.7176, -9.7152, -9.7132, -9.7077, -9.7085, -9.7061, -9.7038, -9.7014, -9.6993, -9.6969, -9.6924, -9.6924, -9.6838, -9.6878, -9.6835, -9.6828, -9.6789, -9.6768, -9.6749, -9.6695, -9.6716, -9.6695, -9.6669, -9.6647, -9.6603, -9.6603, -9.6579, -9.6549, -9.6535, -9.6512, -9.6485, -9.6437, -9.6421, -9.6424, -9.639, -9.6381, -9.6344, -9.6313, -9.6312, -9.6291, -9.6269, -9.6241, -9.6196, -9.6202, -9.618, -9.614, -9.6114, -9.6114, -9.6092, -9.6056, -9.6031, -9.6026, -9.5994, -9.5982, -9.5961, -9.5938, -9.5917, -9.5888, -9.5849, -9.585, -9.5822, -9.5791, -9.5785, -9.5749, -9.573, -9.5699, -9.5692, -9.5663, -9.5655, -9.5604, -9.5614, -9.559, -9.5561, -9.5544, -9.5496, -9.55, -9.5475, -9.5434, -9.5432, -9.5398, -9.5379, -9.5361, -9.5335, -9.5313, -9.5289, -9.5275, -9.5252, -9.523, -9.5206, -9.5185, -9.515, -9.5139, -9.5118, -9.5096, -9.5074, -9.5051, -9.5022, -9.4983, -9.4972, -9.4963, -9.4937, -9.4916, -9.4852, -9.4818, -9.4842, -9.4832, -9.4806, -9.4788, -9.4766, -9.4742, -9.4722, -9.469, -9.4679, -9.4653, -9.4636, -9.4614, -9.4592, -9.454, -9.455, -9.4526, -9.4375, -9.4484, -9.4458, -9.4442, -9.4384, -9.4371, -9.4377, -9.435, -9.4331, -9.4284, -9.4291, -9.4256, -9.425, -9.4222, -8.9223, -8.4243, -8.4239, -8.4215, -8.4154, -8.4183, -8.4158, -8.4154, -8.4137, -8.4089, -8.41, -8.4085, -8.4068, -8.4053, -8.4036, -8.4019, -8.3992, -8.3988, -8.3967, -8.3948, -8.3862, -8.3929, -8.3889, -8.3888, -8.3866, -8.385, -8.3836, -8.382, -8.3797, -8.378, -8.3765, -8.3666, -8.3752, -8.3716, -8.3688, -8.3686, -8.3671, -8.361, -8.3619, -8.3618, -8.3607, -8.3575, -8.3573, -8.3559, -8.3524, -8.3427, -8.3526};
float vertAccel[] = {5.4059, 35.802, 66.212, 88.173, 97.577, 90.984, 91.056, 93.144, 93.485, 92.979, 92.472, 92.101, 92.546, 93.128, 93.684, 94.182, 94.649, 95.09, 95.504, 95.929, 96.46, 97.258, 98.453, 100.01, 101.44, 102.84, 102.37, 102.69, 103.03, 103.22, 103.4, 103.56, 103.7, 103.83, 103.94, 104.05, 104.16, 104.28, 104.41, 104.51, 104.46, 104.39, 104.29, 104.18, 104.04, 103.87, 103.68, 103.28, 102.8, 102.19, 100.75, 99.162, 97.572, 95.964, 94.322, 92.643, 90.921, 89.167, 87.407, 85.731, 84.028, 82.34, 80.617, 79.273, 77.34, 75.494, 73.699, 71.862, 69.925, 67.941, 65.944, 63.878, 61.83, 59.818, 57.834, 55.839, 53.801, 51.734, 49.645, 47.034, 44.063, 39.014, 28.941, 18.882, 10.889, 3.7931, -0.76086, -4.9103, -8.3174, -11.237, -14.088, -15.301, -17.495, -20.427, -22.623, -24.371, -26.11, -26.659, -26.457, -26.26, -26.016, -25.781, -25.565, -25.385, -25.203, -24.998, -24.786, -24.59, -24.414, -24.233, -24.054, -23.884, -23.71, -23.524, -23.347, -23.195, -23.054, -22.895, -22.722, -22.557, -22.399, -22.257, -22.125, -21.996, -21.844, -21.681, -21.542, -21.421, -21.297, -21.17, -21.035, -20.893, -20.76, -20.636, -20.523, -20.418, -20.304, -20.177, -20.044, -19.923, -19.819, -19.718, -19.626, -19.52, -19.4, -19.279, -19.165, -19.07, -18.978, -18.894, -18.806, -18.701, -18.592, -18.489, -18.39, -18.299, -18.217, -18.143, -18.058, -17.971, -17.867, -17.774, -17.688, -17.603, -17.528, -17.458, -17.385, -17.309, -17.228, -17.136, -17.051, -16.972, -16.903, -16.835, -16.769, -16.705, -16.64, -16.564, -16.48, -16.398, -16.329, -16.271, -16.219, -16.161, -16.096, -16.026, -15.951, -15.88, -15.812, -15.755, -15.701, -15.661, -15.606, -15.545, -15.474, -15.407, -15.345, -15.287, -15.232, -15.183, -15.135, -15.084, -15.032, -14.981, -14.929, -14.873, -14.814, -14.753, -14.7, -14.65, -14.609, -14.568, -14.529, -14.487, -14.438, -14.384, -14.331, -14.278, -14.23, -14.187, -14.141, -14.1, -14.066, -14.029, -13.987, -13.946, -13.905, -13.86, -13.811, -13.763, -13.72, -13.677, -13.641, -13.607, -13.572, -13.537, -13.501, -13.462, -13.424, -13.38, -13.343, -13.308, -13.276, -13.243, -13.209, -13.174, -13.139, -13.1, -13.063, -13.032, -13, -12.963, -12.927, -12.897, -12.866, -12.834, -12.803, -12.774, -12.751, -12.723, -12.689, -12.656, -12.625, -12.589, -12.556, -12.523, -12.495, -12.468, -12.44, -12.419, -12.397, -12.376, -12.353, -12.326, -12.301, -12.266, -12.228, -12.196, -12.168, -12.139, -12.113, -12.092, -12.072, -12.054, -12.035, -12.012, -11.991, -11.964, -11.934, -11.906, -11.882, -11.861, -11.833, -11.812, -11.789, -11.767, -11.745, -11.726, -11.708, -11.687, -11.668, -11.643, -11.625, -11.603, -11.578, -11.562, -11.543, -11.519, -11.498, -11.479, -11.459, -11.437, -11.417, -11.402, -11.384, -11.366, -11.345, -11.327, -11.313, -11.297, -11.276, -11.255, -11.239, -11.219, -11.2, -11.183, -11.161, -11.145, -11.128, -11.112, -11.097, -11.086, -11.075, -11.062, -11.054, -11.039, -11.021, -11.001, -10.984, -10.967, -10.946, -10.926, -10.909, -10.892, -10.876, -10.861, -10.843, -10.831, -10.82, -10.813, -10.803, -10.795, -10.791, -10.782, -10.768, -10.758, -10.743, -10.731, -10.715, -10.697, -10.678, -10.659, -10.641, -10.625, -10.613, -10.598, -10.582, -10.569, -10.563, -10.553, -10.545, -10.537, -10.53, -10.522, -10.516, -10.509, -10.501, -10.49, -10.48, -10.469, -10.457, -10.446, -10.431, -10.417, -10.4, -10.389, -10.376, -10.365, -10.352, -10.341, -10.335, -10.327, -10.321, -10.311, -10.303, -10.293, -10.286, -10.279, -10.273, -10.268, -10.263, -10.255, -10.245, -10.24, -10.23, -10.222, -10.217, -10.209, -10.199, -10.189, -10.184, -10.177, -10.165, -10.155, -10.148, -10.136, -10.126, -10.119, -10.111, -10.102, -10.096, -10.091, -10.084, -10.078, -10.071, -10.064, -10.061, -10.057, -10.047, -10.041, -10.033, -10.028, -10.023, -10.015, -10.009, -10.003, -9.9973, -9.9945, -9.9934, -9.987, -9.9816, -9.9778, -9.9748, -9.973, -9.9662, -9.9602, -9.9602, -9.9552, -9.9498, -9.9452, -9.9436, -9.9389, -9.9356, -9.9344, -9.9323, -9.9273, -9.9201, -9.9152, -9.9102, -9.9056, -9.8978, -9.8925, -9.889, -9.8829, -9.8791, -9.873, -9.8705, -9.8655, -9.8581, -9.8515, -9.8473, -9.8439, -9.8384, -9.8324, -9.8271, -9.8232, -9.8209, -9.8142, -9.8089, -9.8051, -9.8037, -9.8015, -9.7959, -9.7934, -9.7888, -9.7855, -9.7811, -9.7783, -9.7723, -9.771, -9.7683, -9.7609, -9.7562, -9.7527, -9.7487, -9.7508, -9.7512, -9.7454, -9.7431, -9.7349, -9.7296, -9.728, -9.7239, -9.7194, -9.7096, -9.6949, -9.6889, -9.6849, -9.6771, -9.6663, -9.6524, -9.6474, -9.6443, -9.6326, -9.6221, -9.6053, -9.5894, -9.5713, -9.5554, -9.5411, -9.657, -9.65, -9.6366, -9.6224, -9.6047, -9.5879, -9.561, -9.5325, -9.5161, -9.4875, -9.4544, -9.4078, -9.3686, -9.3336, -9.2785, -9.2307, -9.1875, -9.1268, -9.0606, 1.0886, 0.76057, 0.44678, 0.19018, -0.047543, -0.26025, -0.48731, -0.67307, -0.77197, -0.75982, -0.72406, -0.6153, -0.58387, -0.39734, -0.29006, -0.24023, -0.15482, -0.02505, 0.004428, 0.0039399, 0.0042101, 0.0076518, 0.0043534, 0.006028, 0.0056422, 0.0077749, 0.0044217, 0.0065426, 0.0070584, 0.0053022, 0.0049351, 0.018133, -0.0023233, 0.002315, 0.0057922, 0.010587, 0.0018247, 0.0053764, 0.0056206, 0.0059767, 0.0060898, 0.0057379, 0.0057403, 0.0069337, 0.0055864, 0.0097703, 0.0018351, 0.0056266, 0.0076827, 0.012406, -7.51E-04, 0.0056123, 0.0070141, 0.0052546, 0.0071084, 0.0051494, 0.0063957, 0.0066377, 0.016819, -0.0040959, 0.0084695, 0.0026347, 0.0060148, 0.0058293, 0.010904, 0.0016326, 0.0058722, 0.0093246, 0.0047701, 0.0043077, 0.013346, -7.89E-04, 0.0077539, 0.0040461, 0.0060897, 0.011848, 1.51E-04, 0.004953, 0.0061632, 0.00915, 0.0033588, 0.0081971, 0.0029779, 0.0077478, 0.0042457, 0.0060884, 0.0053343, 0.0057837, 0.0059533, 0.0078618, 0.0070267, 0.0063344, 0.0024021, 0.0056282, 0.012503, -2.62E-04, 0.0061142, 0.0073319, 0.0058668, 0.005644, 0.0037672, 0.0057647, 0.0057573, 0.0053921, 0.0058577, 0.0055005, 0.0057078, 0.0057893, 0.006368, 0.0051716, 0.0099738, 0.0021454, 0.0068599, 0.0042486, 0.0064046, 0.007689, 0.0024991, 0.0054564, 0.0055487, 0.0066872, 0.0099387, 0.0036545, 0.0031764, 0.0047328, 0.0055322, 0.012742, 4.51E-04, 0.0039306, 0.0051695, 0.0061934, 0.0066013, 0.0056222, 0.0051345, 0.0047078, 0.0056338, 0.0067979, 0.0038197, 0.0056708, 0.0050484, 0.0081788, 0.0048227, 0.0042761, 0.0070685, 0.0047043, 0.013156, -4.54E-04, 0.0076906, 0.002688, 0.0063333, 0.0080231, 0.0037393, 0.0088954, 0.0093312, 9.54E-04, 0.00407, 0.010724, 0.0029871, 0.0024559, 0.0066719, 0.0072683, 0.0029928, 0.011705, 4.74E-04, 0.0047621, 0.0055942, 0.0056277, 0.011507, -1.06E-05, 0.0054244, 0.0069045, 0.0043686, 0.0054882, 0.0057585, 0.0054738, 0.0063868, 0.0056436, 0.0050598, 0.0050161, 0.0054767, 0.00553, 0.0055291, 0.0055436, 0.0089029, 0.0027923, 0.0058762, 0.0053399, 0.0046743, 0.0077943, 0.003265, 0.0062272, 0.0047422, 0.0052085, 0.0091601, 0.0041217, 0.0033018, 0.019505, -0.0062697, 0.0063368, 0.005708, 0.0024314, 0.005071, 0.0051978, 0.0049865, 0.0053202, 0.0063191, 0.0061717, 0.0042823, 0.0067718, 0.0061549, 0.0037906, 0.0045982, 0.0047602, 0.0095808, 0.0066034, 8.54E-04, 0.0052126, 0.008219, 0.0023865, 0.0072702, 0.0021388, 0.0070127, 0.0037504, 0.0048707, 0.0055626, 0.0049603, 0.0052762, 0.0050631, 0.0062885, 0.0080361, 0.0014334, 0.0061127, 0.0041609, 0.011814, -5.53E-04, 0.005091, 0.0046135, 0.0072482, 0.0033772, 0.0055237, 0.0054551, 0.0052935, 0.010966, 0.0023146, 0.0044915, 0.0052653, 0.0060299, 0.0039099, 0.005126, 0.0072926, 0.0036125, 0.0073272, 0.0036388, 0.006189, 0.0065662, 0.0053889, 0.0036741, 0.0065976, 0.0040349, 0.0058351, 0.010411, 9.59E-04, 0.0035435, 0.0058477, 0.0065046, 0.0033809, 0.0072922, 0.0036439, 0.0065882, 0.0071139, 0.0060846, 0.0012141, 0.0047005, 0.0052011, 0.0055459, 0.0083126, 0.0020317, 0.0051497, 0.011265, 0.0053305, 0.0068652, -0.0020976, 0.013385, -0.0028376, 0.0047182, 0.004596, 0.0083487, 0.0022821, 0.0054712, 0.0044491, 0.00544, 0.005168, 0.0047532, 0.0060351, 0.0067173, 0.0026156, 0.0049556, 0.0052242, 0.0052928, 0.0075822, 0.0022807, 0.005858, 0.0042417, 0.0052658, 0.0094906, 0.0023508, 0.0029592, 0.0089782, 0.0034292, 0.0088273, -1.78E-04, 0.0080501, 0.0055029, 3.64E-04, 0.0059906, 0.0051384, 0.0083676, 0.001137, 0.008741, 0.0024699, 0.0045024, 0.0061329, 0.0023266, 0.0048847, 0.015383, -0.0026707, 0.0025825, 0.012435, 1.91E-04, 0.0033871, 0.0025798,
                   0.0058096, 0.0058616, 0.0029766, 0.0090001, 9.07E-04, 0.0055196, 0.0091168, 0.0011806, 0.0053952, 0.0043661, 0.0071309, 0.0033358, 0.0053396, 0.0054006, 0.009724, 3.82E-04, 0.011559, -0.0018172, 0.0051683, 0.0045681, 0.0053809, 0.005628, 0.0044775, 0.0080346, 0.0035064, 0.0066941, 0.0016871, 0.011547, 0.0032971, 0.0012621, 0.0037098, 0.0094175, 0.0016637, 0.0054739, 0.011125, -0.0026822, 0.0050494, 0.0047677, 0.0094947, 8.64E-04, 0.0098329, 6.91E-05, 0.0044523, 0.0047276, 0.0056539, 0.0048755, 0.0072285, 0.0039438, 0.0027496, 0.0049753, 0.0049316, 0.0068913, 0.0027293, 0.0054913, 0.0041183, 0.0048288, 0.0060131, 0.0041913, 0.014055, -0.0047831, 0.0056516, 0.0051151, 0.0044969, 0.0047946, 0.0048776, 0.0068992, 0.0015477, 0.0083795, 0.0021252, 0.0038847, 0.0074548, 0.002656, 0.0057929, 0.011972, -0.0042369, 0.0057426, 0.0040948, 0.0090278, 2.07E-04, 0.0061001, 0.0058748, 0.0036538, 0.0044576, 0.011271, -0.0034406, 0.0054987, 0.0037881, 0.0047193, 0.0049188, 0.0043413, 0.0047623, 0.0048335, 0.0061817, 0.0075111, -2.27E-04, 0.0074672, 0.0038087, 0.0027965, 0.0043334, 0.0093272, 0.0050076, 7.42E-04, 0.0040568, 0.0052607, 0.0031218, 0.0083457, 0.0013332, 0.0054153, 0.013356, -0.002097, 0.0079046, -5.51E-04, 0.0088527, 0.0030122, 0.0026111, 0.008774, 7.93E-04, 0.0048322, 0.0054588, 0.0070221, 0.0024576, 0.0049926, 0.0038039, 0.0057837, 0.0035569, 0.0054545, 0.0044839, 0.0065479, 0.0029997, 0.0048113, 0.0044698, 0.011452, -0.0024363, 0.017947, -0.0085497, 0.0089946, 0.002167, 0.004832, 0.0028771, 0.0049346, 0.0039882, 0.011055, -0.0016835, 0.0048222, 0.0045758, 0.0048425, 0.0042419, 0.0046126, 0.0090618, 1.54E-05, 0.01724, -0.0080384, 0.0086267, 0.0014468, 0.0076469, 0.0042552, 0.0037679, 0.01089, -0.0041586, 0.0040695, 0.0053729, 0.004344, 0.0088001, 1.48E-05, 0.0048206, 0.0058512, 0.0028717, 0.0046799, 0.0052654, 0.0095677, 0.0031897, -4.82E-04, 0.0067306, 0.0019155, 0.0074133, 0.0060303, 3.80E-04, 0.0041124, 0.0043568, 0.0055582, 0.0091156, -0.0012596, 0.0043362, 0.008032, 0.005342, -1.50E-04, 0.0043909, 0.0072641, 0.0050575, 9.86E-04, 0.0063701, 0.0023772, 0.0043113, 0.0044111, 0.0042727, 0.005773, 0.0078126, -2.13E-04, 0.0057062, 0.0061103, 0.0011721, 0.0072988, 0.0038138, 0.006248, 0.0012447, 0.0058725, 0.0015314, 0.010235, -0.001954, 0.0047083, 0.0058979, 0.0034663, 0.0094467, -8.36E-04, 0.0051826, 0.0081026, 3.61E-04, 0.0068868, 0.0036592, 0.00374, 0.0051206, 0.0044884, 0.0047025, 0.0029058, 0.0045614, 0.0044501, 0.0048275, 0.0041032, 0.0069569, 0.0021466, 0.0042091, 0.0044477, 0.0044897, 0.0044813, 0.0057745, 0.0078709, 0.0021927, 0.0017431, 0.0053576, 0.0041804, 0.012821, 0.0067436, -0.0048778, 0.0020008, 0.0052427, 0.00368, 0.0042901, 0.0048683, 0.00404, 0.0062873, 0.0023238, 0.0051435, 0.0034764, 0.004279, 0.0043855, 0.010393, -0.002042, 0.0048698, 0.030172, -0.021781, 0.0053125, 0.0032078, 0.011486, 0.002643, -0.0012425, 0.0054013, 0.0038562, 0.0094339, -0.001542, 0.0071633, 0.0012122, 0.0055836, 2.4514, 1.1893, 8.49E-04, 0.0047247, 0.012327, -0.0059402, 0.0051572, 7.35E-04, 0.0034619, 0.0094351, -0.0020453, 0.0029388, 0.0034403, 0.0029621, 0.0033748, 0.0033367, 0.0055727, 7.12E-04, 0.0041989, 0.0038532, 0.017053, -0.013251, 0.0079318, 1.40E-04, 0.0044091, 0.0032673, 0.0028185, 0.0031945, 0.0046006, 0.0034484, 0.0030118, 0.019786, -0.017234, 0.0072442, 0.0055455, 3.81E-04, 0.0029114, 0.012296, -0.0017978, 2.02E-04, 0.0021614, 0.0064093, 4.58E-04, 0.0028179, 0.00684, 0.019516, -0.019874};
float totalVelocity[] = {0, 0.054059, 0.41215, 1.0744, 1.9563, 2.9324, 3.8426, 4.7535, 5.6852, 6.6204, 7.5505, 8.4756, 9.3969, 10.323, 11.225, 12.06, 12.841, 13.578, 14.279, 15.335, 16.926, 19.327, 22.962, 27.899, 32.908, 37.988, 43.138, 48.264, 53.407, 58.566, 63.735, 68.912, 74.098, 79.292, 84.492, 89.7, 94.914, 100.13, 105.36, 110.6, 115.83, 121.07, 126.3, 131.52, 136.74, 141.95, 147.15, 152.34, 157.51, 162.66, 167.78, 172.83, 177.79, 182.68, 187.48, 192.2, 196.84, 201.38, 205.85, 210.15, 214.44, 218.65, 222.77, 226.15, 230.08, 233.95, 237.73, 241.41, 245.01, 248.51, 251.86, 255.15, 258.35, 261.44, 264.43, 267.32, 270.11, 272.8, 275.39, 277.87, 280.22, 282.42, 284.37, 285.81, 286.76, 287.31, 287.5, 287.46, 287.21, 286.8, 286.24, 285.54, 284.78, 283.91, 282.89, 281.77, 280.55, 279.25, 277.92, 276.61, 275.3, 274, 272.72, 271.44, 270.18, 268.92, 267.68, 266.44, 265.22, 264, 262.79, 261.6, 260.41, 259.22, 258.05, 256.89, 255.73, 254.58, 253.44, 252.31, 251.18, 250.07, 248.96, 247.85, 246.76, 245.67, 244.59, 243.51, 242.44, 241.38, 240.33, 239.28, 238.24, 237.2, 236.17, 235.15, 234.13, 233.12, 232.11, 231.11, 230.12, 229.13, 228.15, 227.17, 226.2, 225.23, 224.27, 223.31, 222.36, 221.41, 220.47, 219.53, 218.6, 217.67, 216.75, 215.83, 214.92, 214.01, 213.1, 212.2, 211.31, 210.42, 209.53, 208.65, 207.77, 206.89, 206.02, 205.16, 204.29, 203.43, 202.58, 201.73, 200.88, 200.04, 199.2, 198.36, 197.53, 196.7, 195.87, 195.05, 194.23, 193.41, 192.6, 191.79, 190.99, 190.18, 189.38, 188.59, 187.8, 187.01, 186.22, 185.44, 184.65, 183.88, 183.1, 182.33, 181.56, 180.79, 180.03, 179.27, 178.51, 177.76, 177, 176.25, 175.51, 174.76, 174.02, 173.28, 172.54, 171.81, 171.08, 170.35, 169.62, 168.9, 168.18, 167.46, 166.74, 166.02, 165.31, 164.6, 163.89, 163.18, 162.48, 161.78, 161.08, 160.38, 159.69, 158.99, 158.3, 157.61, 156.92, 156.24, 155.56, 154.87, 154.2, 153.52, 152.84, 152.17, 151.5, 150.83, 150.16, 149.49, 148.83, 148.17, 147.51, 146.85, 146.19, 145.53, 144.88, 144.23, 143.58, 142.93, 142.28, 141.64, 140.99, 140.35, 139.71, 139.07, 138.43, 137.8, 137.16, 136.53, 135.9, 135.27, 134.64, 134.01, 133.39, 132.76, 132.14, 131.52, 130.9, 130.28, 129.66, 129.05, 128.43, 127.82, 127.21, 126.6, 125.99, 125.38, 124.78, 124.17, 123.57, 122.96, 122.36, 121.76, 121.16, 120.57, 119.97, 119.37, 118.78, 118.19, 117.6, 117.01, 116.42, 115.83, 115.24, 114.65, 114.07, 113.49, 112.9, 112.32, 111.74, 111.16, 110.58, 110, 109.43, 108.85, 108.28, 107.7, 107.13, 106.56, 105.99, 105.42, 104.85, 104.28, 103.72, 103.15, 102.58, 102.02, 101.46, 100.9, 100.33, 99.774, 99.214, 98.656, 98.098, 97.541, 96.985, 96.43, 95.876, 95.322, 94.77, 94.218, 93.666, 93.116, 92.566, 92.017, 91.469, 90.922, 90.376, 89.83, 89.286, 88.742, 88.198, 87.656, 87.114, 86.573, 86.033, 85.493, 84.954, 84.416, 83.878, 83.341, 82.805, 82.269, 81.734, 81.199, 80.665, 80.132, 79.6, 79.069, 78.538, 78.008, 77.478, 76.949, 76.421, 75.893, 75.366, 74.84, 74.314, 73.789, 73.264, 72.74, 72.217, 71.694, 71.171, 70.649, 70.128, 69.607, 69.087, 68.567, 68.048, 67.53, 67.012, 66.495, 65.978, 65.462, 64.946, 64.431, 63.917, 63.403, 62.889, 62.376, 61.863, 61.351, 60.84, 60.329, 59.818, 59.308, 58.798, 58.289, 57.78, 57.272, 56.764, 56.257, 55.75, 55.243, 54.737, 54.232, 53.727, 53.222, 52.718, 52.215, 51.712, 51.209, 50.707, 50.205, 49.704, 49.203, 48.703, 48.203, 47.704, 47.205, 46.706, 46.208, 45.71, 45.213, 44.716, 44.22, 43.724, 43.228, 42.733, 42.238, 41.744, 41.25, 40.757, 40.264, 39.772, 39.28, 38.788, 38.297, 37.807, 37.317, 36.827, 36.338, 35.849, 35.361, 34.873, 34.386, 33.899, 33.413, 32.927, 32.442, 31.958, 31.474, 30.99, 30.508, 30.026, 29.544, 29.063, 28.583, 28.104, 27.625, 27.148, 26.671, 26.194, 25.719, 25.244, 24.771, 24.298, 23.826, 23.355, 22.886, 22.417, 21.95, 21.484, 21.019, 20.555, 20.093, 19.632, 19.173, 18.716, 18.26, 17.807, 17.355, 16.906, 16.459, 16.015, 15.573, 15.135, 14.7, 14.268, 13.841, 13.417, 12.998, 12.585, 12.177, 11.775, 11.38, 10.992, 10.613, 10.242, 9.8825, 9.5339, 9.1976, 8.8752, 8.5682, 8.2783, 8.0072, 7.7568, 7.5291, 7.3264, 7.1507, 7.0037, 6.8871, 6.8022, 6.7501, 6.7315, 6.7465, 6.7958, 6.8834, 7.0029, 7.1526, 7.3302, 7.5338, 7.7608, 8.0088, 8.2759, 8.5604, 8.8599, 9.1722, 9.4957, 9.8294, 10.172, 10.521, 10.877, 11.238, 11.604, 13.249, 12.923, 12.593, 12.31, 12.032, 11.764, 11.458, 11.177, 10.975, 10.886, 10.817, 10.825, 10.751, 10.836, 10.863, 10.839, 10.842, 10.904, 10.918, 10.913, 10.91, 10.91, 10.904, 10.902, 10.898, 10.898, 10.892, 10.89, 10.888, 10.884, 10.88, 10.891, 10.872, 10.87, 10.869, 10.871, 10.861, 10.86, 10.857, 10.854, 10.851, 10.848, 10.845, 10.843, 10.839, 10.841, 10.831, 10.83, 10.829, 10.832, 10.817, 10.818, 10.816, 10.811, 10.81, 10.805, 10.803, 10.8, 10.809, 10.788, 10.794, 10.785, 10.784, 10.781, 10.783, 10.773, 10.772, 10.773, 10.766, 10.762, 10.768, 10.753, 10.756, 10.75, 10.749, 10.752, 10.739, 10.738, 10.736, 10.737, 10.729, 10.73, 10.723, 10.723, 10.717, 10.716, 10.712, 10.709, 10.707, 10.706, 10.703, 10.7, 10.693, 10.692, 10.696, 10.683, 10.684, 10.682, 10.679, 10.676, 10.671, 10.669, 10.666, 10.663, 10.66, 10.657, 10.654, 10.651, 10.649, 10.645, 10.648, 10.638, 10.639, 10.634, 10.633, 10.632, 10.624, 10.623, 10.62, 10.618, 10.62, 10.612, 10.608, 10.606, 10.603, 10.608, 10.596, 10.594, 10.592, 10.59, 10.588, 10.585, 10.581, 10.578, 10.576, 10.574, 10.569, 10.568, 10.564, 10.565, 10.559, 10.555, 10.555, 10.55, 10.555, 10.542, 10.544, 10.537, 10.536, 10.536, 10.529, 10.531, 10.53, 10.52, 10.518, 10.522, 10.513, 10.508, 10.508, 10.507, 10.5, 10.505, 10.493, 10.492, 10.49, 10.487, 10.491, 10.479, 10.479, 10.477, 10.473, 10.47, 10.468, 10.465, 10.463, 10.46, 10.456, 10.453, 10.451, 10.448, 10.445, 10.443, 10.443, 10.436, 10.435, 10.432, 10.428, 10.428, 10.422, 10.421, 10.418, 10.415, 10.416, 10.41, 10.406, 10.419, 10.396, 10.401, 10.398, 10.392, 10.391, 10.388, 10.385, 10.383, 10.381, 10.379, 10.374, 10.374, 10.371, 10.366, 10.364, 10.361, 10.363, 10.359, 10.351, 10.351, 10.352, 10.344, 10.345, 10.338, 10.339, 10.334, 10.332, 10.33, 10.327, 10.324, 10.322, 10.32, 10.32, 10.312, 10.312, 10.308, 10.313, 10.301, 10.301, 10.298, 10.298, 10.292, 10.29, 10.288, 10.285, 10.288, 10.279, 10.277, 10.275, 10.273, 10.268, 10.266, 10.265, 10.26, 10.26, 10.254, 10.254, 10.252, 10.248, 10.244, 10.243, 10.239, 10.237, 10.24, 10.23, 10.228, 10.226, 10.225, 10.219, 10.22, 10.215, 10.214, 10.213, 10.21, 10.203, 10.202, 10.199, 10.197, 10.198, 10.19, 10.189, 10.193, 10.187, 10.186, 10.175, 10.185, 10.17, 10.171, 10.168, 10.169, 10.162, 10.161, 10.158, 10.156, 10.153, 10.15, 10.149, 10.147, 10.141, 10.14, 10.138, 10.135, 10.135, 10.129, 10.128, 10.125, 10.123, 10.125, 10.117, 10.114, 10.116, 10.11, 10.112, 10.103, 10.106, 10.102, 10.095, 10.096, 10.093, 10.094, 10.086, 10.089, 10.082, 10.081, 10.08, 10.074, 10.073, 10.081, 10.065, 10.064, 10.071, 10.06, 10.058, 10.054, 10.054, 10.052, 10.047, 10.05, 10.041, 10.041, 10.043, 10.034, 10.034, 10.03, 10.03, 10.025, 10.023, 10.021, 10.023, 10.013, 10.02, 10.007, 10.008, 10.005, 10.003, 10.001, 9.9974, 9.9982, 9.9926, 9.9925, 9.9858, 9.9917, 9.984, 9.9786, 9.9768, 9.9794, 9.9713, 9.9711, 9.9746, 9.9611, 9.9627, 9.96, 9.9622, 9.9533, 9.9579, 9.948, 9.9476, 9.9452, 9.9436, 9.9407, 9.9406, 9.9361, 9.9319, 9.9307, 9.9283, 9.9278, 9.9222, 9.9215, 9.918, 9.916, 9.9148, 9.9111, 9.9184, 9.9015, 9.9048, 9.9023, 9.8995, 9.8972, 9.8949, 9.8946, 9.8879, 9.8908, 9.884, 9.882, 9.8828, 9.877, 9.8767, 9.8811, 9.866, 9.8692, 9.8657, 9.868, 9.859, 9.8603, 9.8584, 9.8545, 9.8524, 9.8568, 9.843, 9.8456, 9.8419, 9.8401, 9.838, 9.8353, 9.8332, 9.831, 9.8302, 9.83, 9.8214, 9.8244, 9.8198, 9.8161, 9.8144, 9.817, 9.8128, 9.8065, 9.8056, 9.8042, 9.8002, 9.8021, 9.7944, 9.7943, 9.8002, 9.7865, 9.7907, 9.7814, 9.7857, 9.7795, 9.7758, 9.7785, 9.7701, 9.7698, 9.7681, 9.7676, 9.7618, 9.7608, 9.7574, 9.7565, 9.7524, 9.7514, 9.7484, 9.748, 9.743, 9.7416, 9.739, 9.7435, 9.7307, 9.7451, 9.723, 9.7315, 9.7246, 9.7236, 9.7195, 9.7183, 9.7152, 9.7195, 9.7078, 9.7088, 9.7063, 9.7043, 9.7015, 9.6993, 9.7015, 9.6925, 9.7049, 9.6839, 9.6918, 9.6845, 9.6867, 9.6826, 9.6797, 9.6841, 9.6701, 9.6716, 9.6704, 9.6675, 9.6696, 9.6608, 9.6611, 9.66, 9.6554, 9.6542, 9.6526, 9.6549, 9.649, 9.6425, 9.6449, 9.639, 9.6409, 9.6388, 9.6319, 9.6313, 9.6291, 9.628, 9.6299, 9.6198, 9.6203, 9.6216, 9.6186, 9.6115, 9.6114, 9.6121, 9.6091, 9.6033, 9.6047, 9.5995, 9.5983, 9.5962, 9.5939, 9.5931, 9.5936, 9.5853, 9.5866, 9.5855, 9.5794, 9.5817, 9.5776, 9.5776, 9.5715, 9.5724, 9.5667, 9.5717, 9.5605, 9.5615, 9.5604, 9.5565, 9.5595, 9.5496, 9.5506, 9.5515, 9.5434, 9.5455, 9.5413, 9.5387, 9.5374, 9.5348, 9.5328, 9.5289, 9.5275, 9.5252, 9.5233, 9.5206, 9.5209, 9.5153, 9.514, 9.5118, 9.5097, 9.5075, 9.5065, 9.5071, 9.5011, 9.4973, 9.4973, 9.4944, 9.5005, 9.4966, 9.4844, 9.4842, 9.484, 9.4807, 9.4788, 9.4771, 9.4744, 9.4743, 9.4692, 9.4688, 9.4654, 9.4636, 9.4615, 9.4651, 9.454, 9.4554, 9.4779, 9.4385, 9.4495, 9.4458, 9.4511, 9.4441, 9.4374, 9.4389, 9.4358, 9.4389, 9.4288, 9.4321, 9.4257, 9.4263, 9.4223, 8.9227, 8.4245, 8.4248, 8.4303, 8.4175, 8.4207, 8.4161, 8.4154, 8.4189, 8.4104, 8.4103, 8.4089, 8.4068, 8.4053, 8.4036, 8.4039, 8.3992, 8.3992, 8.3976, 8.4076, 8.3868, 8.395, 8.3889, 8.3894, 8.3873, 8.3852, 8.3837, 8.3832, 8.3812, 8.3792, 8.3918, 8.3668, 8.3758, 8.3747, 8.3697, 8.3688, 8.375, 8.3659, 8.3635, 8.362, 8.3634, 8.3583, 8.3573, 8.3589, 8.3698, 8.3427};
float totalAccel[] = {5.4059, 35.802, 66.212, 88.173, 97.577, 90.984, 91.056, 93.144, 93.485, 92.979, 92.472, 92.101, 92.546, 93.128, 93.684, 94.182, 94.649, 95.09, 95.504, 95.929, 96.46, 97.258, 98.453, 100.01, 101.44, 102.84, 102.37, 102.69, 103.04, 103.24, 103.44, 103.62, 103.8, 103.97, 104.12, 104.27, 104.41, 104.54, 104.65, 104.72, 104.63, 104.52, 104.39, 104.25, 104.1, 103.94, 103.76, 103.4, 102.97, 102.41, 100.98, 99.362, 97.716, 96.057, 94.388, 92.708, 91.019, 89.321, 87.613, 85.932, 84.175, 82.423, 80.666, 79.328, 77.438, 75.661, 73.873, 71.996, 70.001, 67.989, 66.01, 63.984, 61.968, 59.944, 57.912, 55.884, 53.858, 51.84, 49.783, 47.132, 44.117, 39.057, 29.002, 18.979, 10.975, 3.8, 0.76324, 4.9113, 8.332, 11.242, 14.097, 15.328, 17.502, 20.427, 22.625, 24.388, 26.138, 26.686, 26.466, 26.261, 26.026, 25.807, 25.599, 25.397, 25.206, 25.004, 24.803, 24.612, 24.427, 24.245, 24.065, 23.892, 23.717, 23.54, 23.372, 23.209, 23.057, 22.898, 22.732, 22.574, 22.422, 22.274, 22.133, 21.998, 21.849, 21.701, 21.563, 21.431, 21.303, 21.173, 21.04, 20.905, 20.778, 20.653, 20.534, 20.421, 20.306, 20.182, 20.059, 19.944, 19.833, 19.726, 19.627, 19.521, 19.404, 19.292, 19.188, 19.086, 18.988, 18.897, 18.807, 18.703, 18.599, 18.501, 18.406, 18.314, 18.226, 18.145, 18.06, 17.973, 17.875, 17.785, 17.7, 17.617, 17.537, 17.463, 17.387, 17.31, 17.23, 17.143, 17.063, 16.987, 16.914, 16.842, 16.773, 16.707, 16.641, 16.565, 16.486, 16.413, 16.345, 16.28, 16.222, 16.162, 16.097, 16.028, 15.957, 15.89, 15.827, 15.767, 15.709, 15.662, 15.606, 15.546, 15.477, 15.414, 15.354, 15.297, 15.241, 15.189, 15.138, 15.086, 15.034, 14.983, 14.93, 14.875, 14.818, 14.763, 14.711, 14.661, 14.615, 14.571, 14.53, 14.488, 14.439, 14.385, 14.335, 14.284, 14.238, 14.194, 14.149, 14.106, 14.069, 14.031, 13.988, 13.947, 13.906, 13.861, 13.814, 13.769, 13.727, 13.685, 13.647, 13.611, 13.575, 13.539, 13.502, 13.464, 13.426, 13.384, 13.347, 13.312, 13.279, 13.245, 13.211, 13.175, 13.14, 13.103, 13.067, 13.034, 13.002, 12.966, 12.931, 12.901, 12.869, 12.837, 12.806, 12.776, 12.752, 12.724, 12.69, 12.657, 12.626, 12.592, 12.56, 12.529, 12.5, 12.472, 12.445, 12.422, 12.398, 12.376, 12.353, 12.326, 12.301, 12.266, 12.231, 12.2, 12.173, 12.145, 12.119, 12.097, 12.075, 12.055, 12.035, 12.012, 11.991, 11.964, 11.935, 11.908, 11.884, 11.863, 11.836, 11.814, 11.791, 11.769, 11.748, 11.727, 11.709, 11.688, 11.668, 11.645, 11.626, 11.604, 11.58, 11.563, 11.544, 11.52, 11.5, 11.48, 11.46, 11.439, 11.419, 11.404, 11.385, 11.367, 11.347, 11.328, 11.314, 11.297, 11.277, 11.256, 11.24, 11.22, 11.201, 11.184, 11.164, 11.147, 11.13, 11.115, 11.099, 11.087, 11.075, 11.063, 11.054, 11.039, 11.021, 11.001, 10.984, 10.967, 10.947, 10.928, 10.911, 10.895, 10.879, 10.864, 10.847, 10.834, 10.823, 10.814, 10.804, 10.795, 10.791, 10.782, 10.768, 10.758, 10.743, 10.731, 10.715, 10.697, 10.678, 10.66, 10.643, 10.627, 10.615, 10.601, 10.585, 10.573, 10.565, 10.555, 10.547, 10.538, 10.53, 10.522, 10.516, 10.509, 10.501, 10.49, 10.48, 10.469, 10.457, 10.446, 10.431, 10.417, 10.401, 10.39, 10.377, 10.366, 10.354, 10.343, 10.336, 10.328, 10.322, 10.312, 10.303, 10.294, 10.287, 10.28, 10.273, 10.268, 10.263, 10.255, 10.245, 10.24, 10.23, 10.223, 10.217, 10.209, 10.199, 10.189, 10.184, 10.177, 10.165, 10.155, 10.148, 10.137, 10.127, 10.119, 10.111, 10.103, 10.097, 10.091, 10.084, 10.078, 10.072, 10.065, 10.061, 10.057, 10.047, 10.042, 10.034, 10.029, 10.023, 10.016, 10.009, 10.004, 9.9978, 9.9949, 9.9936, 9.9872, 9.9818, 9.978, 9.9749, 9.9731, 9.9663, 9.9604, 9.9602, 9.9553, 9.9499, 9.9453, 9.9436, 9.9389, 9.9356, 9.9344, 9.9323, 9.9273, 9.9201, 9.9152, 9.9103, 9.9056, 9.8979, 9.8926, 9.889, 9.883, 9.8791, 9.8731, 9.8706, 9.8656, 9.8583, 9.8517, 9.8476, 9.8442, 9.8388, 9.8328, 9.8276, 9.8237, 9.8214, 9.8148, 9.8095, 9.8057, 9.8043, 9.8021, 9.7965, 9.794, 9.7895, 9.7862, 9.7819, 9.779, 9.7731, 9.7718, 9.7691, 9.7618, 9.7572, 9.7537, 9.7497, 9.7516, 9.7519, 9.7462, 9.7438, 9.7358, 9.7306, 9.7289, 9.7248, 9.7203, 9.7106, 9.6962, 9.6902, 9.6862, 9.6784, 9.6678, 9.654, 9.649, 9.6458, 9.6342, 9.6237, 9.6072, 9.5913, 9.5735, 9.5577, 9.5435, 9.6577, 9.6506, 9.6373, 9.6232, 9.6056, 9.5889, 9.5621, 9.5337, 9.5174, 9.489, 9.456, 9.4097, 9.3708, 9.3358, 9.2811, 9.2335, 9.1903, 9.1299, 9.0639, 9.455, 8.7316, 8.0009, 7.3797, 6.7575, 6.1437, 5.4186, 4.7011, 4.0881, 3.6573, 3.2126, 2.9189, 2.3295, 2.1688, 1.891, 1.3515, 0.57277, 0.20742, 0.27185, 0.18896, 0.064485, 0.20041, 0.062555, 0.086947, 0.010501, 0.18715, 0.028639, 0.1205, 0.18774, 0.14169, 0.033547, 0.4911, 0.23325, 0.0086423, 0.065429, 0.31145, 0.086091, 0.071011, 0.020937, 0.053046, 0.082624, 0.058598, 0.034463, 0.14868, 0.12136, 0.30544, 0.058219, 0.017208, 0.17579, 0.38568, 0.040085, 0.060658, 0.14703, 0.046952, 0.15164, 0.040428, 0.091032, 0.1327, 0.47537, 0.081837, 0.26927, 0.0057755, 0.072073, 0.018874, 0.31082, 0.025978, 0.073159, 0.26588, 0.19769, 0.088253, 0.39227, 0.088064, 0.23453, 0.11729, 0.13965, 0.36526, 0.099098, 0.011632, 0.076628, 0.26316, 0.11457, 0.24757, 0.013079, 0.20172, 0.072118, 0.11077, 0.03, 0.0063091, 0.044342, 0.20106, 0.24706, 0.26273, 0.024258, 0.049799, 0.36455, 0.054504, 0.13975, 0.21975, 0.21954, 0.21362, 0.07755, 0.098127, 0.095854, 0.046535, 0.069662, 0.011241, 0.009454, 0.037017, 0.11757, 0.05127, 0.2968, 0.10522, 0.20112, 0.10037, 0.16267, 0.25699, 0.025218, 0.044581, 0.022907, 0.14471, 0.32148, 0.24088, 0.11595, 0.016777, 0.019271, 0.37684, 0.1744, 0.077262, 0.025618, 0.11832, 0.18166, 0.18105, 0.15703, 0.095706, 0.11416, 0.19599, 0.057949, 0.094019, 0.0053446, 0.22992, 0.17479, 0.036049, 0.16891, 0.068121, 0.38687, 0.1294, 0.25259, 0.014835, 0.12605, 0.24474, 0.13122, 0.2843, 0.3826, 0.21819, 0.14733, 0.35135, 0.25161, 0.054235, 0.16169, 0.23816, 0.041586, 0.35307, 0.11805, 0.06046, 0.062057, 0.058412, 0.34334, 0.011295, 0.061725, 0.17258, 0.061846, 0.05532, 0.079893, 0.065881, 0.14117, 0.14488, 0.10307, 0.028658, 0.012777, 0.0094382, 0.010078, 0.023419, 0.25734, 0.094389, 0.1391, 0.1281, 0.020961, 0.21773, 0.033546, 0.13791, 0.063595, 0.0060342, 0.2719, 0.20948, 0.057425, 0.53063, 0.19064, 0.26189, 0.26915, 0.11865, 0.10827, 0.092647, 0.033878, 0.025969, 0.14086, 0.18469, 0.11089, 0.20557, 0.23637, 0.16007, 0.11253, 0.051468, 0.29395, 0.32692, 0.13884, 0.15112, 0.28485, 0.14629, 0.25085, 0.0021965, 0.19572, 0.081631, 0.032128, 0.087687, 0.048878, 0.062178, 0.029343, 0.15025, 0.27601, 0.0017187, 0.14938, 0.033506, 0.36538, 0.11761, 0.13386, 0.082987, 0.20759, 0.005704, 0.055461, 0.056554, 0.0082307, 0.32823, 0.20542, 0.16416, 0.15537, 0.18993, 0.078817, 0.049511, 0.20098, 0.061438, 0.20985, 0.088174, 0.15867, 0.21856, 0.21716, 0.1199, 0.20046, 0.11683, 0.15928, 0.35448, 0.1894, 0.068422, 0.12931, 0.19931, 0.039879, 0.20806, 0.098576, 0.19341, 0.27057, 0.29487, 0.086499, 0.017196, 0.012195, 0.081957, 0.25769, 0.046148, 0.057789, 0.34883, 0.34531, 0.39207, 0.097554, 0.42117, 0.11487, 0.10219, 0.0064667, 0.25286, 0.07118, 0.11916, 0.022053, 0.084074, 0.088352, 0.029848, 0.14096, 0.22685, 0.038647, 0.029415, 0.063278, 0.089355, 0.23825, 0.030324, 0.13787, 0.052148, 0.086229, 0.3068, 0.19921, 0.029794, 0.28149, 0.21612, 0.35144, 0.13726, 0.28563, 0.30182, 0.0020899, 0.14972, 0.1608, 0.3054, 0.12798, 0.30358, 0.20342, 0.18489, 0.24027, 0.082061, 0.085283, 0.46059, 0.24202, 0.13206, 0.40964, 0.26755, 0.21234, 0.024717, 0.1438, 0.19774, 0.046304, 0.28935, 0.021172, 0.098391, 0.29484, 0.089954, 0.12449, 0.019976, 0.20216, 0.071622, 0.10404, 0.13011, 0.32937, 0.11604, 0.37699, 0.069203, 0.1002, 0.016498, 0.082395, 0.13629, 0.083566, 0.25613, 0.18563, 0.25992, 0.046758, 0.36444, 0.309, 0.15436, 0.0048475, 0.29719, 0.14734, 0.17943, 0.39029, 0.026092, 0.071613, 0.042888, 0.30337, 0.10027, 0.32969, 0.10597, 0.063608, 0.025337, 0.12539, 0.12094, 0.24758, 0.20328, 0.011813, 0.051546, 0.061793, 0.2078, 0.033987, 0.12114, 0.013796, 0.015565, 0.1517, 0.10372, 0.43727, 0.03151, 0.14198, 0.16229, 0.14088, 0.14082, 0.14906, 0.25349, 0.015299, 0.26916, 0.14153, 0.05617, 0.2363, 0.11995, 0.18992, 0.42053, 0.014702, 0.14839, 0.096158, 0.30817, 0.074249, 0.18238, 0.23888, 0.19184, 0.18099, 0.40138, 0.038501, 0.13578, 0.036331, 0.05084, 0.087695, 0.041596, 0.06628, 0.089397, 0.19761, 0.31009, 0.022423, 0.23722, 0.20056, 0.073214, 0.014126, 0.30652, 0.32001, 0.16227, 0.12744, 0.17443, 0.042741, 0.26532, 0.045061, 0.11472, 0.42412, 0.20939, 0.32503, 0.013192, 0.28081, 0.21151, 0.042831, 0.28407, 0.046178, 0.057742, 0.13085, 0.24886, 0.12776, 0.14402, 0.048592, 0.15233, 0.0041106, 0.11774, 0.095604, 0.21372, 0.11083, 0.11983, 0.097278, 0.37846, 0.061367, 0.51246, 0.066961, 0.29497, 0.1983, 0.20651, 0.08572, 0.11431, 0.011158, 0.35372, 0.051711, 0.074746, 0.069083, 0.094105, 0.040683, 0.043148, 0.30015, 0.02789, 0.49749, 0.047791, 0.2826, 0.13656, 0.27907, 0.27109, 0.24128, 0.4258, 0.11232, 0.03555, 0.13102, 0.11646, 0.31357, 0.10424, 0.12351, 0.20316, 0.1005, 0.11306, 0.16633, 0.35875, 0.32406, 0.082471, 0.22169, 0.0042639, 0.24018, 0.2998, 0.099402, 0.047319, 0.018108, 0.15046, 0.33754, 0.066975, 0.026317, 0.2688, 0.30111, 0.04357, 0.007457, 0.23599, 0.26592, 0.064169, 0.20304, 0.056036, 0.0342, 0.042882, 0.010338, 0.16556, 0.30876, 0.086277, 0.17872, 0.26102, 0.079944, 0.25302, 0.23571, 0.3061, 0.18309, 0.24991, 0.09414, 0.35374, 0.040621, 0.038201, 0.16853, 0.086478, 0.32033, 0.0020352, 0.1021, 0.28313, 0.028378, 0.21389,
                     0.17455, 0.12079, 0.16175, 0.16434, 0.17498, 0.0061791, 0.028084, 0.022257, 0.085582, 0.023458, 0.22355, 0.078195, 0.0081611, 0.0098296, 0.032692, 0.044979, 0.17021, 0.31073, 0.23401, 0.039502, 0.1351, 0.11998, 0.42552, 0.48279, 0.22946, 0.0035927, 0.12337, 0.047729, 0.019454, 0.10278, 0.066626, 0.20447, 0.062046, 0.13365, 0.040327, 0.010617, 0.034069, 0.34832, 0.019364, 0.084281, 0.71883, 0.14321, 0.14947, 0.041859, 0.3785, 0.33892, 0.07802, 0.15408, 0.12799, 0.34441, 0.092011, 0.24603, 0.057688, 0.16667, 2.4521, 1.1941, 0.056051, 0.14538, 0.44991, 0.21892, 0.22926, 0.081609, 0.01301, 0.34708, 0.18209, 0.089457, 0.090084, 0.028977, 0.012777, 0.01367, 0.21074, 0.0054598, 0.093283, 0.14627, 0.54068, 0.10719, 0.21982, 0.031574, 0.1109, 0.12127, 0.072639, 0.037467, 0.16197, 0.18237, 0.16964, 0.59503, 0.065925, 0.11663, 0.26591, 0.14832, 0.072732, 0.42696, 0.33623, 0.18829, 0.063036, 0.25016, 0.13339, 0.0040244, 0.26164, 0.63277, 0.031522};
// float rollRate[] = {0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 4.59e-07 , 5.32e-07 , 5.17e-07 , 5.75e-07 , 4.04e-07 , 3.37e-07 , 4.33e-07 , 4.52e-07 , 5.6e-07 , 5.77e-07 , 4.72e-07 , 4.65e-07 , 4.93e-07 , 4.14e-07 , 4.25e-07 , 4.54e-07 , 3.64e-07 , 0.0 , 0.0 , -3.26e-07 , -1.13e-06 , -1.06e-06 , -1.11e-06 , -1.09e-06 , -9.86e-07 , -1.21e-06 , -1.22e-06 , -1.14e-06 , -1.16e-06 , -1.12e-06 , -1.2e-06 , -1.21e-06 , -1.16e-06 , -1.26e-06 , -6.13e-06 , -6.51e-06 , -6.41e-06 , -6.75e-06 , -6.89e-06 , -6.78e-06 , -6.88e-06 , -6.76e-06 , -6.92e-06 , -6.62e-06 , -7.26e-06 , -9.98e-06 , -1.09e-05 , -1.1e-05 , -1.12e-05 , -1.13e-05 , -1.12e-05 , -1.16e-05 , -1.18e-05 , -1.19e-05 , -7.92e-06 , -7.96e-06 , -8.61e-06 , -8.59e-06 , -9.03e-06 , -9.55e-06 , -9.13e-06 , -1.21e-05 , -1.21e-05 , -1.16e-05 , -1.1e-05 , -1.24e-05 , -1.02e-05 , -1.35e-05 , -1.39e-05 , -1.43e-05 , -1.35e-05 , -1.39e-05 , -1.41e-05 , -1.44e-05 , -1.45e-05 , -1.63e-05 , -2.53e-05 , -2.51e-05 , -2.44e-05 , -2.26e-05 , -2.11e-05 , -1.84e-05 , -1.64e-05 , -2.81e-05 , -2.63e-05 , -2.9e-05 , -4.09e-05 , -4.42e-05 , -1.89e-05 , -3.03e-05 , -3.64e-05 , -4.29e-05 , -4.54e-05 , -3.81e-05 , -5.05e-05 , -4.39e-05 , -3.42e-05 , -3.57e-05 , -3.55e-05 , -3.61e-05 , -3.55e-05 , -3.64e-05 , -3.32e-05 , -2.79e-05 , -3.32e-05 , -3.7e-05 , -4.96e-05 , -4.91e-05 , -4.15e-05 , -4.1e-05 , -3.92e-05 , -4.3e-05 , -3.47e-05 , -3.57e-05 , -4.33e-05 , -4.13e-05 , -4.31e-05 , -4.06e-05 , -4.3e-05 , -4.24e-05 , -4.22e-05 , -4.53e-05 , -4.51e-05 , -4.52e-05 , -4.56e-05 , -4.5e-05 , -4.48e-05 , -4.45e-05 , -3.85e-05 , -4.11e-05 , -3.92e-05 , -4.06e-05 , -3.84e-05 , -3.67e-05 , -3.79e-05 , -3.74e-05 , -3.91e-05 , -4.07e-05 , -3.9e-05 , -3.79e-05 , -3.78e-05 , -3.69e-05 , -3.75e-05 , -3.82e-05 , -3.83e-05 , -3.95e-05 , -3.98e-05 , -4.17e-05 , -4.34e-05 , -4.48e-05 , -4.61e-05 , -4.58e-05 , -4.57e-05 , -4.47e-05 , -4.3e-05 , -4.19e-05 , -4.2e-05 , -4.19e-05 , -4.2e-05 , -4.15e-05 , -4.22e-05 , -4.21e-05 , -4.22e-05 , -4.22e-05 , -4.15e-05 , -4.13e-05 , -4.17e-05 , -4.16e-05 , -4.17e-05 , -4.15e-05 , -4.15e-05 , -4.16e-05 , -4.15e-05 , -4.14e-05 , -4.11e-05 , -4.08e-05 , -4.09e-05 , -4.12e-05 , -4.09e-05 , -4.09e-05 , -4.08e-05 , -4.09e-05 , -4.11e-05 , -4.08e-05 , -4.07e-05 , -4.04e-05 , -4.04e-05 , -4.05e-05 , -4.05e-05 , -4.07e-05 , -4.07e-05 , -4.07e-05 , -4.02e-05 , -4.02e-05 , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan}
// float pitchRate[] = {0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 2.6793 , 6.8887 , 11.008 , 15.076 , 19.087 , 23.065 , 27.006 , 30.9 , 34.715 , 38.396 , 41.809 , 44.289 , -41.715 , -36.108 , -31.65 , -27.378 , -23.194 , -19.095 , -15.027 , -10.985 , -6.9642 , -2.9669 , 1.008 , 4.9598 , 8.9027 , 12.81 , 16.673 , 20.465 , 24.147 , 27.559 , 29.971 , -27.309 , -22.185 , -17.803 , -13.586 , -9.4593 , -5.3846 , -1.3429 , 2.6578 , 6.6154 , 10.528 , 14.378 , 18.135 , 21.692 , 24.807 , -25.856 , -19.505 , -15.029 , -10.812 , -6.7052 , -2.6771 , 1.2879 , 5.1753 , 8.9735 , 12.617 , 15.911 , 0.0 , -13.523 , -8.7792 , -4.5166 , -0.42194 , 3.5649 , 7.3977 , 11.005 , 14.2 , -15.556 , -10.171 , -5.6908 , -1.556 , 2.333 , 5.951 , 9.095 , -10.053 , -4.3253 , -0.053054 , 3.8474 , 7.4072 , 10.065 , -8.2501 , -2.9281 , 1.1062 , 4.7668 , 7.6332 , -6.7072 , -0.80176 , 3.0742 , 6.401 , -7.6133 , -1.0207 , 2.7485 , 5.3695 , -3.212 , 1.4928 , 4.7816 , -5.4817 , -0.032025 , 3.6868 , -4.5293 , 1.804 , -2.7058 , 2.2167 , 1.5002 , -1.9329 , 0.94656 , -1.203 , 1.5495 , 0.36957 , 1.3926 , -1.7785 , -0.26953 , 0.44661 , -0.68578 , 1.0792 , 0.93343 , -0.63765 , 1.8033 , 0.76091 , -0.90901 , 2.4639 , -2.2584 , -0.68614 , 0.28001 , 1.738 , -1.5128 , 0.89338 , -1.1822 , 0.99441 , 3.7944 , -4.1612 , -2.5922 , 0.0 , -1.2461 , 1.266 , 2.255 , -2.2209 , 0.0 , -1.5332 , 1.1962 , -0.76737 , 1.4028 , 5.069 , -5.9774 , -1.9404 , 1.2175 , -1.1783 , 3.2729 , 7.4232 , 9.8584 , -7.9839 , -2.7492 , 1.0245 , 3.965 , -2.7276 , 1.3642 , 4.7474 , -3.997 , 0.61094 , 3.0569 , -3.4212 , -1.3009 , 3.1163 , 5.8528 , 7.3027 , 8.4298 , -8.333 , -6.7427 , -4.0266 , -2.2973 , -1.1517 , 1.5177 , 3.4366 , 5.6614 , 7.2482 , -6.8999 , 6.4554 , 7.0358 , 8.3752 , -8.9101 , 9.4443 , -9.8087 , -9.2408 , -8.5185 , -7.2023 , -5.2969 , -3.5393 , 3.2068 , 4.4161 , 6.2004 , 8.3811 , 10.439 , 12.004 , 13.402 , -13.661 , 14.196 , 15.768 , 17.92 , 20.831 , 23.661 , 25.585 , 26.357 , 26.706 , -26.542 , -25.922 , -24.411 , 25.5 , 25.508 , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan};
// float yawRate[] = {0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , -9.01e-05 , -0.000628 , -0.000624 , -0.000827 , -0.000847 , -0.000666 , -0.000592 , -0.000606 , -0.00095 , -0.0010985 , -0.0015503 , -0.0038054 , -0.000692 , -0.000535 , -0.0012883 , -0.0010249 , -0.000942 , -0.0003 , -0.00033 , 0.000102 , -0.00031 , -0.000898 , -0.001046 , -0.001009 , -0.000596 , -0.0013139 , -0.0023957 , -0.0013116 , -0.0025472 , -0.0042968 , -0.023025 , -0.007163 , -0.0037166 , -0.0042659 , -0.0046006 , -0.0051117 , -0.0042399 , -0.0035902 , -0.0025154 , -0.0022473 , -0.0032746 , -0.0052876 , -0.0050751 , -0.0059603 , -0.0095197 , -0.02316 , -0.000379 , 0.000196 , 0.0018084 , 0.000894 , 0.0024911 , 0.0014389 , 0.0031944 , 0.0024645 , 0.000648 , -0.0027008 , 0.0 , -0.000137 , -0.00012 , -0.0011507 , -0.0030537 , -0.0011821 , 0.0020946 , 0.001831 , 0.0037279 , 0.021272 , 0.0038995 , -0.0012574 , -0.0027287 , -0.0067728 , -0.007278 , -0.012245 , -0.027757 , -0.014684 , -0.013204 , -0.016056 , -0.024836 , -0.087325 , -0.031246 , -0.018408 , -0.020324 , -0.023373 , -0.071011 , -0.037815 , -0.023677 , -0.024977 , -0.045539 , -0.10207 , -0.030386 , -0.03952 , -0.13856 , -0.03087 , -0.011417 , -0.018317 , -0.033733 , -0.015934 , -0.0053607 , -0.0017062 , 0.01916 , 0.038938 , 0.025213 , -0.0374 , 0.042974 , -0.004996 , -0.028885 , -0.05433 , 0.011183 , 0.023602 , 0.048326 , 0.0030765 , -0.0017116 , -0.16955 , 0.10904 , 0.014106 , -0.0023297 , -0.055566 , -0.010538 , -0.010574 , -0.02119 , 0.0086259 , -0.0066372 , 0.0022198 , -0.022605 , -0.011422 , -0.014816 , -0.047782 , -0.016451 , -0.04043 , -0.029975 , 0.017004 , 0.0 , -0.0069807 , -0.0089636 , 0.0028871 , 0.031646 , 0.0 , -0.0094394 , -0.03806 , -0.0031528 , 0.0028308 , -0.0069727 , -0.016954 , -0.0019961 , 0.0034367 , 0.008133 , 0.011042 , 0.014832 , 0.053985 , 0.0090028 , 0.0057672 , 0.0029439 , 0.0096855 , 0.009455 , 0.010945 , 0.019334 , 0.017868 , 0.013609 , 0.042801 , 0.29235 , 0.010979 , 0.013289 , 0.043838 , 0.057259 , 0.23836 , 0.037533 , -0.0030354 , -0.018491 , -0.022327 , -0.022359 , 0.019479 , 0.03343 , 0.032468 , 0.28566 , 0.079736 , 0.051726 , -0.051621 , -0.059436 , -2.0436 , -0.047311 , -0.056056 , 0.021723 , 0.031891 , 0.023245 , 0.016908 , 0.019263 , 0.006595 , -0.0085489 , -0.014728 , -0.02021 , -0.032413 , -0.029233 , -0.058116 , -0.82785 , -0.014536 , -0.0038559 , 0.0036416 , 0.0082693 , 0.014542 , 0.036911 , 0.086627 , 0.11426 , 0.18652 , 0.6277 , 7.7692 , -0.089088 , -0.10181 , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan , nan};
// For apogee detection, convert acceleration values to velocity and check if velocity is less than 10 and greater than -10 lets say
// Along with altitude thing ofcourse. And a timer.


/*
Altitude Values : 
0.0,0.9202644672168259,2.5100036771628442,-1.4220670346885589,1.0875940133600048,1.3385933718521181,-0.6692321954687719,-1.5057119923021545,-1.0874804887248768,0.5019523594902187,194.63822276207827,295.4518237441779,407.345184087121,496.3018946452127,568.5193483993289,623.4613937085695,665.1292679138008,695.5072504443071,713.2395044181319,702.3994833178807,684.5071802016164,670.0372589092927,656.6573536927782,638.4886268788117,627.1939197092433,611.6506674251812,594.0928929477748,580.7230024836161,563.3945954662482,551.387936279771,534.989715708775,521.2564860414172,505.608861362506,489.7218524223157,472.89606682173144,461.3442522677561,450.8538227605676,437.930305953208,427.7251890610128,414.83059474402376,404.7352708573366,394.04151945489247,382.1436159380127,371.21310469037473,361.93991698760055,348.9541151196259,340.9975544101011,334.8613489505786,329.5059492091649,320.61520174213996,316.47455006143184,309.5771450318982,299.3257549230552,292.00954634630364,288.13835227781544,278.8533892346639,270.95053918563104,263.5685428150179,258.76448867850195,253.79120908317162,244.02309525836844,236.48909011980138,231.6975735868462,223.48869545485783,215.54253918971287,207.7731587309845,200.6918732707803,197.7072377850312,186.88448097840734,180.49838790649227,174.54157845536017,166.63281700130284,160.768918088433,151.42751754672412,147.94787186277682,140.22891938171722,131.0754033868091,124.30021784192361,119.39096976224572,109.49488450118677,104.08562589012408,98.34137148206415,89.3934181448266,84.75364489307262,78.26143837696542,67.98337542260076,63.85815786169676,54.93981045726152,48.71832210353146,43.088559388532055,36.45439061942801,28.230533394949425,19.677901783860786,14.398901004633398,5.104309622869435,-1.5057119923021545,0.7529376085825801,-1.84028510762128,-0.8365335276307118,0.25097315673435316,-2.425762207987885,-1.2547751048361389,0.6692751870480862,0.0,0.6692751870480862,-2.3421246364935056,-0.2509671110475109,1.5059296371712028,-1.5057119923021545,0.5019523594902187,-2.5093991080750455,-2.5093991080750455,-2.5093991080750455,-2.5093991080750455,-2.5093991080750455,-2.5093991080750455,-2.5093991080750455
*/

int count = 0;
unsigned long startMission;

// Creating a STRUCT for current data
// Using 52 bytes. Putting the size of EEPROM as 60 bytes just in case
struct currentData
{
  int state; //4 bytes
  float alt; //4 bytes
  float accelX; //4 bytes
  float accelY; //4 bytes
  float accelZ; //4 bytes
  float gyroX; //4 bytes
  float gyroY; //4 bytes
  float gyroZ; //4 bytes
  float magnetoX; //4 bytes
  float magnetoY; //4 bytes
  float magnetoZ; //4 bytes
  float velocityVertical; //4 bytes
  float missionTime; // 4 bytes
};


// Declaring an instance of the STRUCT currentData
struct currentData curDataStruct;


// Declaring and Initialiing required variables
int state = 0;
float alt = 0.0;
float accelX = 0.0;
float accelY = 0.0;
float accelZ = 0.0;
float gyroX = 0.0;
float gyroY = 0.0;
float gyroZ = 0.0;
float magnetoX = 0.0;
float magnetoY = 0.0;
float magnetoZ = 0.0;
float missionTime = 0;
float velocityVertical = 0.0;
float accelerationVertical = 0.0;



// Creating Functions for required functionality

// Function to get data from sensors, process it and store it in EEPROM, Flash/SD
// Keep calling this function in every state
void getAndSendData()
{
  // Get all sensor readings 
  // Reading validation
  // Data Packet generation
  // Store in Flash
  // Send to Ground Station
  Serial.println("Get and Send Data Function Called");
  Serial.println(count);
  
  missionTime = timeData[count];
  alt = altData[count];
  velocityVertical = vertVelocity[count];
  accelerationVertical = vertAccel[count];
  // International Barometric Formula : 1013.25hPa is the reference pressure at sea level
  // 44330 * [1 - (P/p0)^(1/5.255) ] 
  // alt = (44330 * (1 - pow((alt/100838.00),(1/5.255))));
  count++;
  curDataStruct.alt = alt;
  curDataStruct.missionTime = missionTime;
  curDataStruct.velocityVertical = velocityVertical;
  curDataStruct.accelY = accelerationVertical;

  EEPROM.put(0,curDataStruct);

   Serial.println(curDataStruct.alt);
  Serial.println(curDataStruct.missionTime);
}

// Function running STATE 0 Code : PRE-LAUNCH
void state0()
{
  Serial.println("State 0 called(Pre-Launch Condition)");
  curDataStruct.state = 0;
//  EEPROM.put(0,curDataStruct);

  int flag = 0; // To signify the condition that will make the code transition from state 0 to 1
  int countAltitude = 0;
  int countAcceleration = 0;
  int countVelocity = 0;
  do //Random condition. This condition needs to be changed. Just an initial condition to create the structure of the code
  {
    getAndSendData();
  
    struct currentData temp;
    temp = curDataStruct;
    alt = temp.alt;
    state = temp.state;
    missionTime = temp.missionTime;
    velocityVertical = temp.velocityVertical;
    accelerationVertical = temp.accelY;    
    EEPROM.get(0,temp);
    Serial.print("State : ");
    Serial.println(temp.state);
    Serial.print("alt : ");
    Serial.println(alt);
    Serial.println(temp.alt);
    Serial.print("Mission Time : ");
    Serial.println(temp.missionTime);
    Serial.print("Vertical Velocity : ");
    Serial.println(temp.velocityVertical);
    Serial.print("Vertical Acceleration : ");
    Serial.println(temp.accelY);
    if(alt > 2)
    {
      if(countAltitude > 5)
      {
      flag = 1;
      startMission = millis();
      }
      countAltitude += 1;
    }
    else
    {
      if(countAltitude > 0)
      {
        countAltitude -= 1;
      }
    }

    if(temp.velocityVertical > 5)
    {
      countVelocity +=1;         
    }
    else
    {
      if(countVelocity > 0)
      {      
        countVelocity -= 1;
      }
    }

    // Here we are going to use the equation, and check for the threshold.
    float altitudeWeight = 0.5;
    float velocityWeight = 0.5;

    float calculation = altitudeWeight * countAltitude + velocityWeight * countVelocity;

    Serial.print("Calculation solution : ");
    Serial.println(calculation);   

    // Just with altitude > 2 5 times, it takes 15-20 value of calculation variable to move to State 1  

    delay(1000);
  }while(flag == 0); // Accelerometer says there is acceleration + altitude is > 5 or 10 for 5 readings
// Vertical acceleration is greater than 0,  means there is liftoff.  

  // Conditions : If alt > 0 for 5 values, then lift off has occured.(BMP condition). Using IMU, If acceleration has occured(For 5 values), that's a condition. 
  //Using GPS, If the latitude/ longitude has changed(For 5 values), that is a condition. 
  
  // We can create an equation out of these. Giving weights to each of the condition. AX + BY + CZ. A, B, C will be coefficients, that can be 1, if the 
  // condition has successfully occured and 0 if not. X, Y, Z will be the weight we provide each condition. We will check with a threshold value for the equation. 
  //If our calculated value if greater than threshold, then condition has occured

  // Put a condition for state transition
  state1();
}
// Function running STATE 1 Code : ASCENT
void state1()
{
  Serial.println("State 1 called(Ascent Condition)");
  curDataStruct.state = 1;
//  EEPROM.put(0, curDataStruct);

  int flag = 0;

  float prevalt = 0.0;

  int altitudeCounter = 0;
  int velocityCounter = 0;
  int accelerationCounter = 0;
    
  do
  {
  
    getAndSendData();
  
    struct currentData temp;
    temp = curDataStruct;
//    alt = temp.alt;
//    state = temp.state;
//    missionTime = temp.missionTime;
    
    EEPROM.get(0,temp);
    Serial.print("State : ");
    Serial.println(temp.state);
    Serial.print("alt : ");
    Serial.println(temp.alt);
    Serial.print("Mission Time : ");
    Serial.println(temp.missionTime);
    Serial.print("Vertical Velocity : ");
    Serial.println(temp.velocityVertical);
    Serial.print("Vertical Acceleration : ");
    Serial.println(temp.accelY);
    /*if(temp.alt < prevalt)
    {
      Serial.print("alt maybe decresing : ");
      Serial.print(temp.alt);
      Serial.print(" , ");
      Serial.println(prevalt);
      altitudeCounter++;
      if(altitudeCounter >= 5)
      {
        flag = 1;
      }

      delay(1000);
    }
    else
    {
      if(altitudeCounter > 0)
      {
        altitudeCounter -= 1;
      }
    }

    if(temp.velocityVertical < 5)
    {
        velocityCounter += 1;
    }
    else
    {
      if(velocityCounter > 0)
      {
        velocityCounter -= 1;
      }  
    }

    // Here we are going to use the equation, and check for the threshold.
    float altitudeWeight = 0.5;
    float velocityWeight = 0.5;

    float calculation = altitudeWeight * altitudeCounter + velocityWeight * velocityCounter;

    // With just the altitude condition, calculation was about 10-12 value, before it transferred to the next stage.

    Serial.print("Calculation solution : ");
    Serial.println(calculation);   
    
    prevalt = temp.alt;*/
    delay(1000);
    if((millis() - startMission) > 35000){
      flag = 1;
    }

  }while(flag == 0); // Previous Altitude is greater than the current altitude for 5 readings, Velocity is near 0(-5 to +5)for 5 readings
                      // We can try adding tilt detection, but it is risky. It doesn't seem reliable. Also a t2a timer.

  // Apogee detection condition : If altitude < prevAltitude for 5 values, If there is a tilt greater than a thrershold value, If velocity = 0 or close to 0(-1 to 1) for 5 values, If acceleration is -9.8 for 
  // 5 values, Or if velocity vector is -ve for 5 values. 
  
  //We can create an equation out of these. Giving weights to each of the condition. AX + BY + CZ. A, B, C will be coefficients, that can be 1, if the 
  // condition has successfully occured and 0 if not. X, Y, Z will be the weight we provide each condition. We will check with a threshold value for the equation. If our calculated value if greater than threshold, then condition has occured
  // Having a seperate mission timer running checking for a simulated t2a, if no condition is approved by anything, then atleast this pre-calculated t2a, will set off the pyro charge. We can also add remote detonation of pyro charge
  // From ground station
  
  // Put a condition here for state transition
  state2();
}


// Function running STATE 2 Code : APOGEE(DEPLOYING DROGUE PARACHUTES)
void state2()
{
  Serial.println("State 2 called(Apogee Condition)");
  curDataStruct.state = 2;
//  EEPROM.put(0, curDataStruct);

  int c = 0;

  Serial.println("Recovery Ejection charge being set off");

  // Setting off the pyro charge. Turning the relay off and on 5 times.

  while(c < 5)
  {
    getAndSendData();
  
    struct currentData temp;
    temp = curDataStruct;
    alt = temp.alt;
    state = temp.state;
    missionTime = temp.missionTime;
     
    EEPROM.get(0,temp);
    Serial.print("State : ");
    Serial.println(temp.state);
    Serial.print("alt : ");
    Serial.println(temp.alt);
    Serial.print("Mission Time : ");
    Serial.println(temp.missionTime);

    Serial.println("Relay being turned on");
    delay(1000);
    Serial.println("Relay being turned off");
    delay(1000);

    c++;
  }

  // Put a condition here for state transition
  state3();
}

// Function running STATE 3 Code : DESCENT
void state3()
{
  Serial.println("State 3 called(Descent Condition)");
  curDataStruct.state = 3;
//  EEPROM.put(0, curDataStruct);

  int altitudeCount = 0;
  int flag = 0;
  do
  {
    getAndSendData();
  
    struct currentData temp;
    temp = curDataStruct;
    alt = temp.alt;
    state = temp.state;
    missionTime = temp.missionTime;
    EEPROM.get(0,temp);
    Serial.print("State : ");
    Serial.println(temp.state);
    Serial.print("alt : ");
    Serial.println(temp.alt);
    Serial.print("Mission Time : ");
    Serial.println(temp.missionTime);

    if(alt < 457.20)
    {
      Serial.print(alt);
      Serial.print(" , ");
      Serial.println("Less than 457.2m");
      if(altitudeCount >= 5)
      {
        flag = 1;
      }
      altitudeCount++;
      
    }
    else
    {
      altitudeCount = 0;
    }

    delay(2000);
  }while(flag == 0); //Altitude is less than 500m for 5 consecutive readings and a t2mainparachutedeployment timer
  // We can add a t2MainParachuteDeployment, in this using which we can deploy pyro charges for main parachute if nothing works. 
  // Can also add remote detonation of Pyro charges for Main parachute Deployment
  // Put a condition here for state transition
  state4();
}

// Function running STATE 4 Code : LANDING
void state4()
{
  Serial.println("State 4 called(Landed Condition)");
  curDataStruct.state = 4;
//  EEPROM.put(0, curDataStruct);

  int flag = 0;
  int altitudeCounter = 0;
  int velocityCounter = 0;
  int accelerationCounter = 0;

  do
  {
    getAndSendData();
  
    struct currentData temp;
    temp = curDataStruct;
    alt = temp.alt;
    state = temp.state;
    missionTime = temp.missionTime;
    EEPROM.get(0,temp);
    Serial.print("State : ");
    Serial.println(temp.state);
    Serial.print("alt : ");
    Serial.println(temp.alt);
    Serial.print("Mission Time : ");
    Serial.println(temp.missionTime);
    Serial.print("Vertical Velocity : ");
    Serial.println(temp.velocityVertical);
    Serial.print("Vertical Acceleration : ");
    Serial.println(temp.accelY);


    // If 5 readings are constant, then  the rocket has landed
    if(alt <= 5)
    {
      altitudeCounter++;
      if(altitudeCounter >= 5)
      {
        flag = 1;
      }
      else
      {
        if(altitudeCounter > 0)
        {
        altitudeCounter -= 1;
        }        
      }
    }
    if(temp.velocityVertical < 2 && temp.velocityVertical > -2)
    {
        velocityCounter += 1;
    }
    else
    {
      if(velocityCounter > 0)
      {
        velocityCounter -= 1;
      }  
    }

    // Here we are going to use the equation, and check for the threshold.
    float altitudeWeight = 0.5;
    float velocityWeight = 0.5;

    float calculation = altitudeWeight * altitudeCounter + velocityWeight * velocityCounter;

    // With just the altitude condition, calculation was about 10-12 value, before it transferred to the next stage.

    Serial.print("Calculation solution : ");
    Serial.println(calculation);   

    delay(1000);
  }while(flag == 0); // If altitude is less than 5 or 10m for 5 readings and Velocity is 0, Acceleration is around -9.8m/s^2
  // If altitude is between -5 and +5 m for 5-10 consecutive values, If velocity is between the range of a threshold velocity range for 
  // 5-10 consecutive values. If the roll/pitch/yaw values are constant 
  // for 5-10 consecutive values. If calculated t2L has been reached. 
  Serial.println("Rocket has landed");
  Serial.println("Turning on the buzzer");
}

// Function to Calibrate Sensors
void calibrateSensors()
{
  // Function to calibrate all the sensors
  Serial.println("Calibrating Sensors");
}

// Initial Setup of the Flight Computer...
// Figuring out current State of the flight. Calibrating sensors and performing the particular state code function accordingly.
void setup() {
  // Read from EEPROM and go to state
  // If state is 0, then calibrate, else go to state
  delay(5000);
  Serial.begin(9600);
  // EEPROM.begin(EEPROM_SIZE);

  Serial.println("EEPROM Ready....");
  
  struct currentData stateStruct;
  EEPROM.get(0,stateStruct);
  
  if(stateStruct.state == -1) // Either -1 or nan, check once.
  {
    calibrateSensors();
    state0();
  }
  else if(stateStruct.state == 0){
    state0();
    }
  else if(stateStruct.state == 1)
  {
    state1();
  }
  else if(stateStruct.state == 2)
  {
    state2();
  }
  else if(stateStruct.state == 3)
  {
    state3();
  }
  else if(stateStruct.state == 4)
  {
    state4();
  }
}

void loop() {
  // put your main code here, to run repeatedly:

}
